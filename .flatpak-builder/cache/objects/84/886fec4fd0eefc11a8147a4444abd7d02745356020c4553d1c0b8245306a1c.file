#!/usr/bin/bash

:   ' 
/**
* NAME
* am-okay (version 3.1.2) .
*
* DESCRIPTION
*        am-okay is a program that allows dynamically to copy/cut files or
*        directories . You can initialize an action in a terminal and finalize this action
*        in another terminal with the same user .
* 
* OVERVIEW
*        @requires This program allows to execute some actions (see the precondition below)
*        that can be very useful ( Ve-Quantic inspired ) .
* 
* REQUIRES
*        @requires The only options supported are [ { --copy | -c } , { --cut | -x } , { --paste-copy |
*                                                     --paste-c | -pc } , { --paste-cut | --paste-x |
*                                                     -px } , { --array | -a } , { --index | -i } ,
*                                                   { --put | -p } , { --stat-copy | --stat-c |
*                                                     -sc } , { --stat-cut | --stat-x | -sx } ,
*                                                   { --stat | -s } , { --reset | -r } ,
*                                                   { --out | -o } , { --doc } ,
*                                                   { --help } , { --version } ]
*        && the command am-okay has to have at least one option then (if that is your goal) the target
*        directory/directories or file/files . Example : am-okay --copy <myTargetDir>
*                                                      (for sure without the hyphens)
*        && with the option <--index | -i> there is a limit at the level of the indexes
*            and the indexes have to be a positive integer (min 0 and max 3)
*        && the [ <--index | -i>,  <--put | -p> and <--stat | -s > ] options are linked to
*            the <--array | -a> option
*        && <--stat-copy | --stat-c | -sc> is linked to the <--copy | -c> option
*        && <--stat-cut | --stat-x | -sx> is linked to the <--cut> option
*        && the <--reset | -r> option has to have request as value
*        && <--out | -o> option is linked to the [ --copy | -c, --cut | -x ] options
*        && the files or directories do not have the character `?` at the level of their name.
* 
* SYNOPSIS
*        am-okay [option | options] [ target-dirs | target-files ]
* 
* OPTIONS
*        --copy , -c   type(string) // This option allows to copy file/files or directory/directories
*                      (that are its targets), you can use the joker <*> to indicate everything that is
*                      in the current directory .
*                           Ex : am-okay --copy <your-target-dir-or-file> <..>
* 
*        --cut , -x    type(string) // This option allows to cut file/files or directory/directories
*                      (that are its targets), you can use the joker <*> to indicate everything that is
*                      in the current directory .
*                           Ex : am-okay --cut <your-target-dir-or-file> <..>
* 
*        --paste-copy , --paste-c , -pc type(string) // This option allows to paste a copy action .
*                                            Ex : am-okay --paste-copy <your-target-directory>
*                                       You can use or not the dot <.> to indicate the current directory .
*                                       The --paste-copy option is linked to the <--copy> option .
*                                       Use case :
*                                           Action 1 ->  Ex : am-okay --copy <my-file>
*                                           Action 2 ->  Ex : am-okay --paste-copy <my-target-dir>
* 
*        --paste-cut , --paste-x , -px  type(string) // This option allows to paste a cut action .
*                                            Ex : am-okay --paste-cut <your-target-directory>
*                                       You can use or not the dot <.> to indicate the current directory .
*                                       This option `--paste-cut` is linked to the <--cut> option .
*                                       Use case :
*                                           Action 1 ->  Ex : am-okay --cut <my-file>
*                                           Action 2 ->  Ex : am-okay --paste-cut <my-target-dir>
* 
*        --array , -a  type(string) // This option allows to copy or cut files or directories in a
*                      separate way ( via indexes ) .
*                           Ex : am-okay --array --index 0 --copy <file-1> <dir-1> <dir-2> <..>
*                      For pasting according to the previous action you have to do :
*                           Ex : am-okay --array --index 0 --put <your-target-dir>
* 
*        --index , -i  type(string | int) // This option allows to target the index of the array .
*                      Use case :
*                           Ex : am-okay --array --index 0 --copy <file-1> <dir-1> <dir-2> <..>
*                           Ex : am-okay -a -i 1 -x <your-target-dirs-files>
*                          Note :
*                              1.0 You can not do this ->  Ex : am-okay --array --index 0-1 --copy <your-dir> <..>
*                              1.1 You can do this     ->  Ex : am-okay --array --index 0-1 --put <your-dir>
*                              1.2 In the previous action ( 1.1 ) the <--put> option has to finalize either a copy
*                                  action or cut action .
* 
*        --put , -p    type(string) // This option allows to put directory/directories or file/files that have
*                      been targeted by the <--array> option associated with the <--copy> or <--cut> option .
*                      Use case :
*                           Ex : am-okay --array --index 0 --put <your_dir>
*                           Ex : am-okay --array --index 0-3 --put <your_dir>  // The indexes between `0` and `3`
*                           Ex : am-okay --array --index 0,3 --put <your_dir>  // The indexes `0` and `3`
* 
*        --stat-copy , --stat-c , -sc   type(string) // To see the status of an action done with the <--copy>
*                                       option as first parameter .
*                                            Ex : am-okay --stat-copy
* 
*        --stat-cut , --stat-x , -sx    type(string) // To see the status of an action done with the <--cut>
*                                       option as first parameter .
*                                            Ex : am-okay --stat-cut
* 
*        --stat , -s   type(string) // To see the status of an action done with the <--array> option as first
*                      parameter and along with the <--copy> or <--cut> option .
*                      Use case :
*                           Ex : am-okay --array --index 0 --stat
*                           Ex : am-okay --array --index 0-2 --stat  // The indexes between `0` and `2`
*                           Ex : am-okay --array --index 0,2 --stat  // The indexes `0` and `2`
* 
*        --out , -o    type(string) // This option is linked to the [ --copy , --cut ] options (direct action)
*                           Ex : am-okay --copy <your_dirs/files> --out <your_target_dir>
*                           Ex : am-okay --cut <your_dirs/files> --out <your_target_dir>
* 
*        --reset , -r  type(string) // To reset your desired action(s), there will be a prompt for the
*                      possible choices ( note : The `request` word has to follow the --reset option ) .
*                           Ex : am-okay --reset request
* 
*        --doc         type(string) // To see the documentation of the am-okay program
*                           Ex : am-okay --doc
* 
*        --help        type(string) // To get help
*                           Ex : am-okay --help
* 
*        --version     type(string) // To see the version of the am-okay program
*                           Ex : am-okay --version
* 
* ENSURE
*        @ensure Execution successfully if the preconditions are satisfied . That is to say, with
*        the above options and the appropriated sequences linked to these options .
* 
* NOTE
*        @note This program depends of some programs , these programs are required in the global package
*        of am-okay .
*        Once you have pasted files or directories with the <--paste-copy> option, you can paste again
*        the same files/dirs with the same option <--paste-copy> . For sure an action done by
*        <--copy> option requires the <--paste-copy> option for pasting , and an action
*        done by <--cut> option requires <--paste-cut> option for pasting. The two
*        [ --copy, --cut ] options have different hash codes .
* 
*        The files or directories do not have the character `?` at the level of their name .
* 
*        When you execute the command am-okay, the command in question works with the profile it was run
*        with. Running it with different profiles will result in different scenarios, because for
*        the program each user is different . So when you realize an action , make sure to
*        conserve the same profile to paste .
* 
*        When you execute the command am-okay with the <--paste-copy>, <--paste-cut>, <--put> ,
*        options a progress bar will be displayed to indicate the move or copy status
* 
* AUTHOR
*        Author    : Bald√© Amadou <baldeuniversel@protonmail.com>
* 
* CONTRIBUTOR
*        Contributor    : Diallo Ismaila <diallois@protonmail.com>
*/
    '

##### Action linked to the command <<am-okay>> .
#####
#####

set -uo pipefail # To exit the script if there is an error

trap "setterm --cursor on" SIGINT

# Declaration variables
listOfParams=("--copy" "--cut" "--paste-copy" "--paste-cut" "--array" \
    "--index" "--put" "--stat-copy" "--stat-cut" "--stat" "--reset" \
    "--out" "-c" "-x" "-o" "-a" "-i" "-px" "-pc" "-p" "-sx" "-sc" \
    "--stat-x" "--stat-c" "--paste-c" "--paste-x"  "-s" "-r" \
    "--doc" "--help" "--version")

counterOption=0



# Return an error when the number of parameters is lower than one 
if [[ $# -lt 1 ]]
then
    echo "~"
    echo -e "There is at least one parameter \U001F914"

    exit 1
fi

# Check the inputs parameters
for optionUP in ${listOfParams[@]}
do
    if [[ $1 != $optionUP ]]
    then
        counterOption=$(( counterOption + 1 ))
    fi

    #
    if [[ $counterOption -eq 31 ]]
    then
        echo "~"
        echo -e "Unknown `tput setaf 3; tput bold`$1` tput sgr0 ` option \U001F9D0 ."
        exit 1
    fi
done
#
if [[ $1 != "--stat-copy" ]] && [[ $1 != "--stat-cut" ]] \
    && [[ $1 != "--stat-c" ]] && [[ $1 != "-sc" ]] \
    && [[ $1 != "--stat-x" ]] && [[ $1 != "-sx" ]] \
    && [[ $1 != "--doc" ]] && [[ $1 != "--help" ]] && [[ $1 != "--version" ]] \
    && [[ $1 != "--paste-copy" ]] && [[ $1 != "--paste-cut" ]] \
    && [[ $1 != "--paste-c" ]] && [[ $1 != "--paste-x" ]] \
    && [[ $1 != "-pc" ]] && [[ $1 != "-px" ]] \
    && [[ $# -lt 2 ]] 
then
    echo "~"
    echo -e "It has to be at least two parameters \U001F9D0"
    exit 1
fi
#
if [[ $1 == "--stat-copy" ]] || [[ $1 == "--stat-cut"  ]]
then
    if [[ $# -ne 1 ]]
    then
        echo "~"
        echo "One parameter is allowed for this action ."
        exit 1
    fi
fi



### Creation of directories, files and functions for the actions linked to the 
# [ --copy, --cut, --paste-copy, --paste-cut, --put, --stat-cut, --stat-copy, --stat,
#   --reset, --index, --array, --doc, --help ] options. [tag0]

# Declaration variables
getPersonalUserDir="$HOME"
rootDirForActions="$HOME/.local/share/am-okay"
rootDirCopyCutFiles="$rootDirForActions/classic"
copyActionFile="$rootDirCopyCutFiles/copy-action"
cutActionFile="$rootDirCopyCutFiles/cut-action"
copyActionFileOnly="$rootDirCopyCutFiles/copy-action-only"
cutActionFileOnly="$rootDirCopyCutFiles/cut-action-only"

arrayRootDir="$rootDirForActions/array"
arrayIndexInitDir="$arrayRootDir/array-init"
arrayIndex1Dir="$arrayRootDir/array-1"
arrayIndex2Dir="$arrayRootDir/array-2"
arrayIndex3Dir="$arrayRootDir/array-3"
#
arrayIndexInitCopyCutActionFile="$arrayRootDir/array-init/copy-cut-action"
arrayIndexInitCopyCutActionFileOnly="$arrayRootDir/array-init/copy-cut-action-only"
#
arrayIndex1CopyCutActionFile="$arrayRootDir/array-1/copy-cut-action"
arrayIndex1CopyCutActionFileOnly="$arrayRootDir/array-1/copy-cut-action-only"
#
arrayIndex2CopyCutActionFile="$arrayRootDir/array-2/copy-cut-action"
arrayIndex2CopyCutActionFileOnly="$arrayRootDir/array-2/copy-cut-action-only"
#
arrayIndex3CopyCutActionFile="$arrayRootDir/array-3/copy-cut-action"
arrayIndex3CopyCutActionFileOnly="$arrayRootDir/array-3/copy-cut-action-only"

#
globalCounterReject="false"
globalCounterOkay="false"

getThisPid="$$"
fileCodeCommandReturn="/tmp/.$USER/am-okay/$getThisPid/code-of-return"
fileCodeCommandErrorMv="/tmp/.$USER/am-okay/$getThisPid/error-move"
fileCodeCommandErrorCp="/tmp/.$USER/am-okay/$getThisPid/error-cp"

fileClassicPidCommandMv="$rootDirCopyCutFiles/classic-pid-mv" 
fileClassicPidCommandCp="$rootDirCopyCutFiles/classic-pid-cp"

fileArrayInitCommandMvCp="$arrayIndexInitDir/array-init-pid-mv-cp" 
fileArrayOneCommandMvCp="$arrayIndex1Dir/array-one-pid-mv-cp" 
fileArrayTwoCommandMvCp="$arrayIndex2Dir/array-two-pid-mv-cp"
fileArrayThreeCommandMvCp="$arrayIndex3Dir/array-three-pid-mv-cp"



# Launch a script by an autostart event -> Remove the historical of the actions done by `am-okay` command
if [[ ! -e "$HOME/.config/autostart/am-okay.desktop" ]]
then

    if [[ ! -e "$HOME/.config/autostart" ]]
    then
        mkdir -p "$HOME/.config/autostart" 2> /dev/null
    fi
    
    echo -e "[Desktop Entry]" >>  "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null 
    echo -e "Type=Application" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Version=1.0" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Name=am-okay" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Exec=bash -c /app/usr/lib/am-okay/library/am-okay-reset-actions.sh" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Terminal=false" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Categories=System" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    
    echo -e "X-GNOME-Autostart-enabled=true" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null 
fi





:   '
/**
* @overview The `removePidFile` allows to remove expressly a file containing a pid of an action, 
* however, a file containing the pid of an action in progress cannot be removed  
*
* @param {string} $@ // The file or files to remove 
* 
*/
    '
function removePidFile
{
    # Declaration local variable 
    local getPid=""



    #
    for inputFile in $@
    do
        #
        if [[ -e "$inputFile" ]]
        then
            #
            getPid=` cat $inputFile 2> /dev/null | tr -d "[[:space:]]" `

            #
            if ! ps -p $getPid &> /dev/null
            then
                #
                rm -fr "$inputFile" 2> /dev/null 
            fi
        fi
    done
}





:   '
/**
* @overview The function `increaseColsLines` allows to increase the number of cols or lines
*/
    '
function increaseColsLines
{
    # Declaration variables
    getColumns=` tput cols `
    getLines=` tput lines `

    #
    if [[ $? -ne 0 ]]
    then
        echo "~"
        echo -e "Missing dependency ~ \e[1;031mtput\e[0m command üßê "

        exit 1
    fi


    # Increase the number of columns or lines
    if [[ $getColumns -lt 47 ]] && [[ $getLines -ge 4 ]]
    then
        #
        printf '\033[8;%s;%st' $getLines 47 2> /dev/null
    #
    elif [[ $getColumns -lt 47 ]] && [[ $getLines -lt 4 ]]
    then
        #
        printf '\033[8;%s;%st' 4 47 2> /dev/null
    #
    elif [[ $getColumns -ge 47 ]] && [[ $getLines -lt 4 ]]
    then
        #
        printf '\033[8;%s;%st' 4 $getColumns 2> /dev/null
    fi
}





:   '
# @overview Function to raise an exception .
# :param $1 type(string) // The file where the code of return of the command will be sent .
#
    '
function alertNonEffectiveAction 
{
    # Declaration variables
    getPathOfFileForReturnLastCommand=$1
    getNumberOfLine=0

    if [[ $# -eq 1 ]] && [[ $getPathOfFileForReturnLastCommand != "none" ]]
    then
        if [[ -e "$getPathOfFileForReturnLastCommand" ]]
        then
            getNumberOfLine=` wc -l $getPathOfFileForReturnLastCommand | cut -d " " -f1 | tr -d "[[:space:]]" `

            #
            if [[ $getNumberOfLine -gt 0 ]]
            then
                echo "~"
                echo -e "Something wrong \U001F9D0, please make sure you have the right to execute the \e[36;1mam-okay\e[0m "
                echo -e "program or you have write access on the target directory, it's also " 
                echo -e "possible that the source dir is included in the target dir ."

                #
                setterm --cursor on


                #
                if [[ -e "/tmp/.$USER/am-okay/$getThisPid" ]]
                then
                    
                    #
                    rm -fr "/tmp/.$USER/am-okay/$getThisPid"
                fi

                exit 1 
            fi
        fi
    fi
}



:   '
# :param $@ type(string) // Colored the input value(s) .
    '
function colorElem
{
    echo -e "\033[36m$@\033[0m"
}



:   '
# :param $@ type(string) // Truncate the data of the input file .
    '
function truncateFileData
{
    # Remove the data of these target files
    truncate -s 0 $@ 2> /dev/null
    echo "~"
    echo -e "Done \U002705 ."
}



:   '
# :param $1 type(array) // An array containing two values(min, max) .
    '
function maxMin 
{
    # Declaration variables
    local maxValueIndex=0
    local minValueIndex=0
    local -a arrayMaxMin=()
    local getFirstInt=""
    local getSecondInt=""

    #
    if [[ ` echo "$1" | grep -E -- "-"  `  ]]
    then
        getFirstInt=` echo "$1" | cut -d "-" -f1 `
        getSecondInt=` echo "$1" | cut -d "-" -f2 `
    elif [[ ` echo "$1" | grep -E -- ","  `  ]]
    then
        getFirstInt=` echo "$1" | cut -d "," -f1 `
        getSecondInt=` echo "$1" | cut -d "," -f2 `
    fi

    # Set the min and max value 
    if [[ $getFirstInt -lt $getSecondInt ]]
    then
        maxValueIndex=$getSecondInt
        minValueIndex=$getFirstInt
    elif [[ $getFirstInt -gt $getSecondInt ]]
    then
        maxValueIndex=$getFirstInt
        minValueIndex=$getSecondInt
    else
        maxValueIndex=$getFirstInt
        minValueIndex=$maxValueIndex
    fi
    
    #
    arrayMaxMin=($maxValueIndex $minValueIndex)
    echo ${arrayMaxMin[*]}
}



:   '
# :param $1 type(string) // This parameter represents an action `copy` or `cut` .
# :param $2 type(int || string) // The index of the array or none value .
    '
function arrayStatus
{
    local statusCopyCutActionFile=$1
    local indexValue=$2

    #
    if [[ -s $statusCopyCutActionFile ]] && [[ -e "$statusCopyCutActionFile" ]] && \
        [[ ` wc -l "$statusCopyCutActionFile" | cut -d " " -f1 ` -gt 2 ]]
    then
        cat $statusCopyCutActionFile 2> $fileCodeCommandReturn
        
        # Call the function `alertNonEffectiveAction`
        alertNonEffectiveAction $fileCodeCommandReturn

        #
        truncate -s 0 $fileCodeCommandReturn
    elif [[ -e "$statusCopyCutActionFile" ]]
    then
        echo "~"
        echo -e `tput setaf 3; tput bold`"There isn't a copy/cut action \U001F9D0 for the index $indexValue ."`tput sgr0`
        echo ""
    else
        echo "~"
        echo "Something wrong ‚ö†Ô∏è  , missing dependency (reinstall the program) ."
        exit 1
    fi
}



:   '
# :param $1 type(string) // The action that has to be done via (ex : --copy, --cut, --array ...) . 
# :param $2 type(string) // This parameter represents a header of some files, the possible headers are
#                           "Copy Action" or "Cut Action" .
# :param $3 type(string) // The target files/directories .
# :param $4 type(int || string) // The index value of the array or none value .
    '
function copyCutAction 
{
    # Declaration local variables
    local actionRequested=$1
    local headerFile=$2
    local targetElems=()
    local indexValue=$4
    local statusCopyCutActionFile=""
    local onlyCopyCutActionFile=""
    local getParamThree=` echo "$3" | tr -d "\n" `

    #
    local counter=0
    local getCurrentPath=` pwd `
 
    # Redefine the `separator`
    saveIFS=$IFS
    IFS='?'

    # Append the files/dirs in the array
    for dir_file in ` echo "$getParamThree" `
    do
        #
        targetElems+=( ` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' ` )
    done

    # Restore the separator
    IFS=$saveIFS

    
    # Set the proper value to the global variables according the actions requested
    if ( [[ $actionRequested == "--copy" ]] || [[ $actionRequested == "--cut" ]] ) && [[ $indexValue == "none" ]]
    then
        #
        if [[ $actionRequested == "--copy" ]]
        then
            #
            if [[ $indexValue == "none" ]]
            then
                # Check to see if there is a `paste` action in progress linked to the current action `--copy` , 
                # if there is the case , return a warning (error)
                if [[ -e "$rootDirCopyCutFiles/classic-pid-cp" ]] 
                then
                    #
                    if [[  ` cat  "$rootDirCopyCutFiles/classic-pid-cp" 2> /dev/null | tr -d "[[:space:]]" | wc -c ` -gt 0 ]]
                    then
                        echo "~"
                        echo -e "There is a paste action in progress which is linked to the \e[1;036mcopy\e[0m "
                        echo -e "action (the register itself) üßê"

                        exit 1
                    fi
                fi 

                #
                statusCopyCutActionFile=$copyActionFile
                onlyCopyCutActionFile=$copyActionFileOnly
            fi
        elif [[ $actionRequested == "--cut" ]] 
        then
            #
            if [[ $indexValue == "none" ]]
            then
                # Check to see if there is a `paste` action in progress linked to the current action `--cut` , 
                # if there is the case , return a warning (error)
                if [[ -e "$rootDirCopyCutFiles/classic-pid-mv" ]] 
                then
                    #
                    if [[  ` cat  "$rootDirCopyCutFiles/classic-pid-mv" 2> /dev/null | tr -d "[[:space:]]" | wc -c ` -gt 0 ]]
                    then
                        echo "~"
                        echo -e "There is a paste action in progress which is linked to the \e[1;036mcut\e[0m "
                        echo -e "action (the register itself) üßê"

                        exit 1
                    fi
                fi 

                #
                statusCopyCutActionFile=$cutActionFile
                onlyCopyCutActionFile=$cutActionFileOnly
            fi
        fi

    elif [[ $actionRequested == "--array" ]] && [[ $indexValue -eq 0 ]]
    then
        # Check to see if there is a `paste` action in progress linked to the current action `--put` 
        # for the array index 0 , if there is the case , return a warning (error)
        if [[ -e "$arrayIndexInitDir/array-init-pid-mv-cp" ]] 
        then
            #
            if [[  ` cat  "$arrayIndexInitDir/array-init-pid-mv-cp" 2> /dev/null | tr -d "[[:space:]]" | wc -c ` -gt 0 ]]
            then
                echo "~"
                echo -e "\e[1;035mIndex 0\e[0m is busy, There is a put action in progress which is "
                echo -e "linked to the register (index 0 itself) üßê"

                exit 1
            fi
        fi 

        #
        statusCopyCutActionFile=$arrayIndexInitCopyCutActionFile
        onlyCopyCutActionFile=$arrayIndexInitCopyCutActionFileOnly

    elif [[ $actionRequested == "--array" ]] && [[ $indexValue -eq 1 ]]
    then
        # Check to see if there is a `paste` action in progress linked to the current action `--put` 
        # for the array index one (1) , if there is the case , return a warning (error)
        if [[ -e "$arrayIndex1Dir/array-one-pid-mv-cp" ]] 
        then
            #
            if [[  ` cat  "$arrayIndex1Dir/array-one-pid-mv-cp" 2> /dev/null | tr -d "[[:space:]]" | wc -c ` -gt 0 ]]
            then
                echo "~"
                echo -e "\e[1;035mIndex 1\e[0m is busy, There is a put action in progress which is "
                echo -e "linked to the register (index 1 itself) üßê"

                exit 1
            fi
        fi 

        #
        statusCopyCutActionFile=$arrayIndex1CopyCutActionFile
        onlyCopyCutActionFile=$arrayIndex1CopyCutActionFileOnly

    elif [[ $actionRequested == "--array" ]] && [[ $indexValue -eq 2 ]]
    then
        # Check to see if there is a `paste` action in progress linked to the current action `--put` 
        # for the array index two (2) , if there is the case , return a warning (error)
        if [[ -e "$arrayIndex2Dir/array-two-pid-mv-cp" ]] 
        then
            #
            if [[  ` cat  "$arrayIndex2Dir/array-two-pid-mv-cp" 2> /dev/null | tr -d "[[:space:]]" | wc -c ` -gt 0 ]]
            then
                echo "~"
                echo -e "\e[1;035mIndex 2\e[0m is busy, There is a put action in progress which is "
                echo -e "linked to the register (index 2 itself) üßê"

                exit 1
            fi
        fi 

        #
        statusCopyCutActionFile=$arrayIndex2CopyCutActionFile
        onlyCopyCutActionFile=$arrayIndex2CopyCutActionFileOnly

    elif [[ $actionRequested == "--array" ]] && [[ $indexValue -eq 3 ]]
    then
        # Check to see if there is a `paste` action in progress linked to the current action `--put` 
        # for the array index two (3) , if there is the case , return a warning (error)
        if [[ -e "$arrayIndex3Dir/array-three-pid-mv-cp" ]] 
        then
            #
            if [[  ` cat  "$arrayIndex3Dir/array-three-pid-mv-cp" 2> /dev/null | tr -d "[[:space:]]" | wc -c ` -gt 0 ]]
            then
                echo "~"
                echo -e "\e[1;035mIndex 3\e[0m is busy, There is a put action in progress which is "
                echo -e "linked to the register (index 3 itself) üßê"

                exit 1
            fi
        fi 

        #
        statusCopyCutActionFile=$arrayIndex3CopyCutActionFile
        onlyCopyCutActionFile=$arrayIndex3CopyCutActionFileOnly
    fi


    # Check the existence of directory/directories or file/files and do ...
    for elemDirFile in "${targetElems[@]}"
    do
        #
        if [[ ! ( -e "$elemDirFile" ) ]]
        then
            echo "~"
            echo -e "Something wrong \U001F9D0, at least one file or directory does not exist ."
            exit 1
        else
            elemDirFile=` echo $elemDirFile | \
                awk '{ if (substr($0, length($0), 1) == "/") $0 = substr($0, 1, length($0)-1); print }' `
        fi

        # Erase the content of the file linked to the variable `$copyActionFile` and add 
        # a header `Copy action`
        if [[ $counter -eq 0 ]]
        then
            if [[ $actionRequested == "--copy" ]] || [[ $actionRequested == "--cut" ]]
            then
                # Add a header to the file linked to the variable `$statusCopyCutActionFile`
                echo "$headerFile : " | awk '{ print ORS, "\033[32m"$0"\033[0m" }' > $statusCopyCutActionFile
            else
                # Add a header to the file linked to the variable `$statusCopyCutActionFile`
                echo "" > $statusCopyCutActionFile
                echo "$headerFile [$indexValue] : " | awk '{ print "\033[32m"$0"\033[0m" }' >> $statusCopyCutActionFile
            fi

            # Erase the data that is in the `$onlyCopyCutActionFile`
            if [[ ! ( -e $onlyCopyCutActionFile ) ]]
            then
                touch $onlyCopyCutActionFile 2> $fileCodeCommandReturn

                # Call the function
                alertNonEffectiveAction $fileCodeCommandReturn

                #
                truncate -s 0 $fileCodeCommandReturn
            else
                truncate -s 0 $onlyCopyCutActionFile
            fi
            #
        fi

        # Add of the content according the target elements(dirs/files)
        if [[ -e "$getCurrentPath/$elemDirFile" ]]
        then
            if [[ $actionRequested == "--copy" ]] || [[ $actionRequested == "--cut" ]]
            then
                echo -e "             $counter -> ${getCurrentPath}/${elemDirFile}" | awk '{ print "\033[36m"$0"\033[0m" }' \
                >> $statusCopyCutActionFile
                echo -e "${getCurrentPath}/${elemDirFile}" >> $onlyCopyCutActionFile
            else
                echo -e "                $counter -> ${getCurrentPath}/${elemDirFile}" | awk '{ print "\033[36m"$0"\033[0m" }' \
                >> $statusCopyCutActionFile
                echo -e "${getCurrentPath}/${elemDirFile}" >> $onlyCopyCutActionFile
            fi
            
        else
            if [[ $actionRequested == "--copy" ]] || [[ $actionRequested == "--cut" ]]
            then
                echo -e "             $counter -> $elemDirFile" | awk '{ print "\033[36m"$0"\033[0m" }' \
                >> $statusCopyCutActionFile
                echo -e "$elemDirFile" >> $onlyCopyCutActionFile
            else
                echo -e "                $counter -> $elemDirFile" | awk '{ print "\033[36m"$0"\033[0m" }' \
                >> $statusCopyCutActionFile
                echo -e "$elemDirFile" >> $onlyCopyCutActionFile
            fi
        fi
               
        # Increment the `$counter`
        counter=$(( counter + 1 ))
    done

    #
    IFS=$saveIFS


}



:   '
# :param $1 type(string) // The action that has to be done via (ex : --copy, --cut, --array ...) .
# :param $2 type(int || string) // The index value of the array or none value .
    '
function statAction
{
    # Declaration local variables
    local actionRequested=$1
    local indexValue=$2
    local statusCopyCutActionFile=""
   
    #
    if [[ $1 == "--copy"  ]] && [[ $indexValue == "none" ]]
    then
        #
        statusCopyCutActionFile=$copyActionFile

        if [[ -s $statusCopyCutActionFile ]] && [[ -e "$statusCopyCutActionFile" ]] && \
            [[ ` wc -l "$statusCopyCutActionFile" | cut -d " " -f1 ` -gt 2 ]]
        then
            cat $statusCopyCutActionFile 2> $fileCodeCommandReturn

            # Call the function `alertNonEffectiveAction`
            alertNonEffectiveAction $fileCodeCommandReturn

            #
            truncate -s 0 $fileCodeCommandReturn
            exit 0
        elif [[ -e "$statusCopyCutActionFile" ]]
        then
            echo "~"
            echo -e `tput setaf 3; tput bold`"There isn't a copy action \U001F9D0 ."`tput sgr0`
            exit 0
        else
            echo "~"
            echo "Something wrong ‚ö†Ô∏è  , missing dependency (reinstall the program) ."
            exit 1
        fi

    elif [[ $1 == "--cut"  ]] && [[ $indexValue == "none" ]]
    then
        #
        statusCopyCutActionFile=$cutActionFile

        if [[ -s $statusCopyCutActionFile ]] && [[ -e "$statusCopyCutActionFile" ]] && \
            [[ ` wc -l "$statusCopyCutActionFile" | cut -d " " -f1 ` -gt 2 ]]
        then
            cat $statusCopyCutActionFile 2> $fileCodeCommandReturn

            # Call the function `alertNonEffectiveAction`
            alertNonEffectiveAction $fileCodeCommandReturn

            #
            truncate -s 0 $fileCodeCommandReturn
            exit 0
        elif [[ -e "$statusCopyCutActionFile" ]]
        then
            echo "~"
            echo -e `tput setaf 3; tput bold`"There isn't a cut action \U001F9D0 ."`tput sgr0`
            exit 0
        else
            echo "~"
            echo "Something wrong ‚ö†Ô∏è  , missing dependency (reinstall the program) ."
            exit 1
        fi

    elif [[ $1 == "--array" ]] && [[ $indexValue -eq 0 ]]
    then
        # Call the function `arrayStatus`
        arrayStatus $arrayIndexInitCopyCutActionFile 0

    elif [[ $1 == "--array" ]] && [[ $indexValue -eq 1 ]]
    then
        # Call the function `arrayStatus`
        arrayStatus $arrayIndex1CopyCutActionFile 1

    elif [[ $1 == "--array" ]] && [[ $indexValue -eq 2 ]]
    then
        # Call the function `arrayStatus`
        arrayStatus $arrayIndex2CopyCutActionFile 2

    elif [[ $1 == "--array" ]] && [[ $indexValue -eq 3 ]]
    then
        # Call the function `arrayStatus`
        arrayStatus $arrayIndex3CopyCutActionFile 3
    fi
}



:   '
# :param $1 type(string) // The action that has to be done via (ex : --copy, --cut, --array ...) .
# :param $2 type(string) // The target files/directories .
# :param $3 type(int || string) // The index value of the array or none value .
# :param $4 type(string) // An array action with the option `--put` .
    '
function pasteAction
{
    # Declaration local variables
    local actionRequested=$1
    local targetDir="$2"
    local indexUP=$3
    local arrayPut=$4
    local onlyCopyCutActionFile=""
    local statusCopyCutActionFile=""
    local getHeaderCopyCut=""

    if [[ $actionRequested == "--paste-copy" ]] || [[ $actionRequested == "--paste-cut" ]]
    then
        #
        if [[ $actionRequested == "--paste-copy"  ]]
        then
            onlyCopyCutActionFile=$copyActionFileOnly
            statusCopyCutActionFile=$copyActionFile
        else
            onlyCopyCutActionFile=$cutActionFileOnly
            statusCopyCutActionFile=$cutActionFile
        fi
    elif [[ $actionRequested == "--array" ]] && [[ $arrayPut == "--put" ]]
    then
        if [[ $indexUP -eq 0 ]]
        then
            onlyCopyCutActionFile=$arrayIndexInitCopyCutActionFileOnly
            statusCopyCutActionFile=$arrayIndexInitCopyCutActionFile
            getHeaderCopyCut=` cat $arrayIndexInitCopyCutActionFile 2> /dev/null | grep "Cut\|Copy" | \
                cut -d "A" -f1 | tr -d " " `
        elif [[ $indexUP -eq 1 ]]
        then
            onlyCopyCutActionFile=$arrayIndex1CopyCutActionFileOnly 
            statusCopyCutActionFile=$arrayIndex1CopyCutActionFile
            getHeaderCopyCut=` cat $arrayIndex1CopyCutActionFile 2> /dev/null | grep "Cut\|Copy" | \
                cut -d "A" -f1 | tr -d " " `
        elif [[ $indexUP -eq 2 ]]
        then
            onlyCopyCutActionFile=$arrayIndex2CopyCutActionFileOnly
            statusCopyCutActionFile=$arrayIndex2CopyCutActionFile
            getHeaderCopyCut=` cat $arrayIndex2CopyCutActionFile 2> /dev/null | grep "Cut\|Copy" | \
                cut -d "A" -f1 | tr -d " " `
        elif [[ $indexUP -eq 3 ]]
        then
            onlyCopyCutActionFile=$arrayIndex3CopyCutActionFileOnly
            statusCopyCutActionFile=$arrayIndex3CopyCutActionFile
            getHeaderCopyCut=` cat $arrayIndex3CopyCutActionFile 2> /dev/null | grep "Cut\|Copy" | \
                cut -d "A" -f1 | tr -d " " `
        fi
    fi

    # If the target directory is the current directory -> do `pwd` else if get the given directory or raise an exception
    if [[ "$targetDir" == "." ]] || [[ "$targetDir" == "" ]]
    then
        targetDir=` pwd `
    elif [[ -e "$targetDir"  ]] && [[ -d "$targetDir" ]]
    then
        targetDir=` echo "$2" | awk '{ if ( substr($0, length($0), 1) == "/" ) $0 = substr($0, 1, length($0)-1); print }' `
    else
        # Exit the program
        echo "~"
        echo -e "\U001F9D0 Wrong target ` tput setaf 6; tput bold `$2` tput sgr0 ` ."
        exit 1
    fi
    
    #
    if [[ -s "$onlyCopyCutActionFile" ]] && [[ -e "$onlyCopyCutActionFile" ]] && \
        [[ ` wc -l "$onlyCopyCutActionFile" | cut -d " " -f1 ` -gt 0 ]]
    then
        # Disable the cursor in the console/terminal
        setterm -cursor off
        
        #
        if ( [[ $actionRequested == "--paste-copy" ]] ) || ( [[ $actionRequested == "--array" ]] \
            && [[ $arrayPut == "--put" ]] && [[ ` echo "$getHeaderCopyCut" | grep "Copy" ` ]] )
        then
            #
            echo -e ""

            while IFS= read -r readLine
            do
                # Get the end file/target from the path ...
                getEndFileDir=` echo "$readLine" | tac -s "/" | head -n 1 `
                
                # Copy only the files/dirs that exist
                if [[ -e "$readLine" ]]
                then
                    # Copy the files/directories towards the given directory
                    cp -ra "$readLine" "$targetDir" 2> $fileCodeCommandErrorCp &


                    # Store the pid of the last command
                    if [[ $indexUP == "none" ]] && [[ $arrayPut == "none" ]]
                    then
                        #
                        echo "$!" > $fileClassicPidCommandCp

                    elif [[ $indexUP -eq 0 ]] && [[ $arrayPut == "--put" ]]
                    then
                        #
                        echo "$!" > $fileArrayInitCommandMvCp

                    elif [[ $indexUP -eq 1 ]] && [[ $arrayPut == "--put" ]]
                    then
                        #
                        echo "$!" > $fileArrayOneCommandMvCp

                    elif [[ $indexUP -eq 2 ]] && [[ $arrayPut == "--put" ]]
                    then
                        #
                        echo "$!" > $fileArrayTwoCommandMvCp

                    elif [[ $indexUP -eq 3 ]] && [[ $arrayPut == "--put" ]]
                    then
                        #
                        echo "$!" > $fileArrayThreeCommandMvCp
                    fi


                    #
                    sleep 0.0005

                    # Call the function ->  ` alertNonEffectiveAction `
                    alertNonEffectiveAction $fileCodeCommandErrorCp 

                    truncate -s 0 $fileCodeCommandErrorCp
                
                    #
                    if [[ -f "$readLine" ]] && [[ ! ( -e "$targetDir/$getEndFileDir" ) ]]
                    then
                        touch "$targetDir/$getEndFileDir" 2> $fileCodeCommandReturn

                        # Call the function ->  ` alertNonEffectiveAction `
                        alertNonEffectiveAction $fileCodeCommandReturn

                        #
                        truncate -s 0 $fileCodeCommandReturn

                    elif [[ -d "$readLine" ]] && [[ ! ( -e "$targetDir/$getEndFileDir" ) ]]
                    then
                        mkdir -p "$targetDir/$getEndFileDir" 2> $fileCodeCommandReturn

                        # Call the function ->  ` alertNonEffectiveAction `
                        alertNonEffectiveAction $fileCodeCommandReturn

                        #
                        truncate -s 0 $fileCodeCommandReturn
                    fi
                    

                    #
                    if [[ $indexUP == "none" ]] && [[ $arrayPut == "none" ]]
                    then
                        # Display the status of the transfer
                        /app/usr/lib/am-okay/library/progress-bar-copy.sh "$readLine" "$targetDir/$getEndFileDir"
                    #    
                    elif [[ $indexUP -eq 0 ]] &&  [[ $arrayPut == "--put" ]]
                    then
                        # Display the status of the transfer
                        /app/usr/lib/am-okay/library/progress-bar-array-copy.sh "$readLine" "$targetDir/$getEndFileDir" 0
                    #
                    elif [[ $indexUP -eq 1 ]] &&  [[ $arrayPut == "--put" ]]
                    then
                        # Display the status of the transfer
                        /app/usr/lib/am-okay/library/progress-bar-array-copy.sh "$readLine" "$targetDir/$getEndFileDir" 1
                    #
                    elif [[ $indexUP -eq 2 ]] &&  [[ $arrayPut == "--put" ]]
                    then
                        # Display the status of the transfer
                        /app/usr/lib/am-okay/library/progress-bar-array-copy.sh "$readLine" "$targetDir/$getEndFileDir" 2
                    #
                    elif [[ $indexUP -eq 3 ]] &&  [[ $arrayPut == "--put" ]]
                    then
                        # Display the status of the transfer
                        /app/usr/lib/am-okay/library/progress-bar-array-copy.sh "$readLine" "$targetDir/$getEndFileDir" 3
                    fi
                    

                    #
                    if [[ ! ( $? -eq 0 ) ]]
                    then
                        #
                        globalCounterOkay="true"
                        truncate -s 0 $fileCodeCommandReturn 2> /dev/null

                        #
                        if [[ -e "$fileClassicPidCommandCp" ]]
                        then
                            rm -rf $fileClassicPidCommandCp 2> /dev/null
                        fi

                        #
                        echo -e "\n"
                        echo "~"
                        echo -e "The process was interrupted üîå"
                        
                        #
                        setterm --cursor on

                        #
                        exit 1
                    else
                        #
                        globalCounterOkay="true"
                        truncate -s 0 $fileCodeCommandReturn 2> /dev/null

                        #
                        if [[ -e "$fileClassicPidCommandCp" ]]
                        then
                            rm -rf $fileClassicPidCommandCp 2> /dev/null
                        fi
                    fi 

                else
                    # Replace the current line of the files by empty line
                    sed -i "s|.*`echo $readLine `.*||" $onlyCopyCutActionFile
                    sed -i "s|.*`echo $readLine `.*||" $statusCopyCutActionFile

                    #
                    globalCounterReject="true"
                fi
            done < $onlyCopyCutActionFile

            # Delete the empty lines 
            sed -i "1,$ {/^[[:space:]]*$/d}" $onlyCopyCutActionFile
            sed -i "2,$ {/^[[:space:]]*$/d}" $statusCopyCutActionFile
            
            if [[ $globalCounterReject == "true" ]] && [[ $globalCounterOkay == "true" ]]
            then
                echo "~"
                echo "At lease one file or directory was not copied  ‚ö†Ô∏è  ."

                # Reset
                globalCounterReject="false"
                globalCounterOkay="false"
            elif [[ $globalCounterReject == "true" ]] && [[ $globalCounterOkay == "false" ]]
            then
                echo "~"
                echo "Nothing to paste, the source files or directories seem to have been moved  ‚ö†Ô∏è  ."

                # Reset
                globalCounterReject="false"
                globalCounterOkay="false"
            fi
        elif [[ $actionRequested == "--paste-cut"  ]] || ( [[ $actionRequested == "--array" ]] \
            && [[ $arrayPut == "--put" ]] && [[ ` echo "$getHeaderCopyCut" | grep "Cut" ` ]] )
        then
            #
            echo ""

            while IFS= read -r readLine
            do
                # Get the end file/target from the path ...
                getEndFileDir=` echo "$readLine" | tac -s "/" | head -n 1 `
                
                # Move only the files/dirs that exist
                if [[ -e "$readLine" ]]
                then

                    # Verify if the user has the permission to write in the target directory
                    touch "$targetDir/.test-write-from-am-okay" 2> $fileCodeCommandReturn

                    # Call the function ->  ` alertNonEffectiveAction `
                    alertNonEffectiveAction $fileCodeCommandReturn

                    #
                    truncate -s 0 $fileCodeCommandReturn 2> /dev/null
                    rm -r "$targetDir/.test-write-from-am-okay" 2> /dev/null

                    # Move the files/directories towards the given directory
                    if [[ ! ( "$readLine" == "$targetDir" ) ]]
                    then
                        #
                        mv --backup=numbered "$readLine" "$targetDir" 2> $fileCodeCommandErrorMv &


                        # Store the pid of the last command
                        if [[ $indexUP == "none" ]] && [[ $arrayPut == "none" ]]
                        then
                            #
                            echo "$!" > $fileClassicPidCommandMv
    
                        elif [[ $indexUP -eq 0 ]] && [[ $arrayPut == "--put" ]]
                        then
                            #
                            echo "$!" > $fileArrayInitCommandMvCp
    
                        elif [[ $indexUP -eq 1 ]] && [[ $arrayPut == "--put" ]]
                        then
                            #
                            echo "$!" > $fileArrayOneCommandMvCp
    
                        elif [[ $indexUP -eq 2 ]] && [[ $arrayPut == "--put" ]]
                        then
                            #
                            echo "$!" > $fileArrayTwoCommandMvCp
    
                        elif [[ $indexUP -eq 3 ]] && [[ $arrayPut == "--put" ]]
                        then
                            #
                            echo "$!" > $fileArrayThreeCommandMvCp
                        fi


                        #
                        sleep 0.0005
                        
                        #
                        if [[ -s "$fileCodeCommandErrorMv" ]]
                        then
                            echo "~"
                            echo -e "Action rejected for the file/dir [ $readLine ] -> same parent target ‚ö†Ô∏è  "
                            echo ""
                            
                            #
                            truncate -s 0 "$fileCodeCommandErrorMv" 2> /dev/null

                            #
                            continue
                        else
                            
                            #
                            if [[ $indexUP == "none" ]] && [[ $arrayPut == "none" ]]
                            then
                                # Display the status of the transfer
                               /app/usr/lib/am-okay/library/progress-bar-cut.sh "$readLine" "$targetDir/$getEndFileDir"
                            #    
                            elif [[ $indexUP -eq 0 ]] &&  [[ $arrayPut == "--put" ]]
                            then
                                # Display the status of the transfer
                                /app/usr/lib/am-okay/library/progress-bar-array-cut.sh "$readLine" "$targetDir/$getEndFileDir" 0
                            #
                            elif [[ $indexUP -eq 1 ]] &&  [[ $arrayPut == "--put" ]]
                            then
                                # Display the status of the transfer
                                /app/usr/lib/am-okay/library/progress-bar-array-cut.sh "$readLine" "$targetDir/$getEndFileDir" 1
                            #
                            elif [[ $indexUP -eq 2 ]] &&  [[ $arrayPut == "--put" ]]
                            then
                                # Display the status of the transfer
                                /app/usr/lib/am-okay/library/progress-bar-array-cut.sh "$readLine" "$targetDir/$getEndFileDir" 2
                            #
                            elif [[ $indexUP -eq 3 ]] &&  [[ $arrayPut == "--put" ]]
                            then
                                # Display the status of the transfer
                                /app/usr/lib/am-okay/library/progress-bar-array-cut.sh "$readLine" "$targetDir/$getEndFileDir" 3
                            fi


                            #
                            if [[ ! ( $? -eq 0 ) ]]
                            then
                                #
                                truncate -s 0 $fileCodeCommandReturn 2> /dev/null

                                #
                                if [[ -e "$fileClassicPidCommandMv" ]]
                                then
                                    rm -rf "$fileClassicPidCommandMv" 2> /dev/null
                                fi
        
                                #
                                echo -e "\n"
                                echo "~"
                                echo -e "The process was interrupted üîå"
                                
                                #
                                setterm --cursor on
        
                                #
                                exit 1
                            else
                                #
                                truncate -s 0 $fileCodeCommandReturn 2> /dev/null

                                #
                                if [[ -e "$fileClassicPidCommandMv" ]]
                                then
                                    rm -rf "$fileClassicPidCommandMv" 2> /dev/null
                                fi
                            fi 
                            
                        fi  
                    else
                        echo "~"
                        echo -e "Action rejected for the file/dir [ $readLine ] -> same parent target ‚ö†Ô∏è  "
                        echo ""
                        
                        #
                        continue
                    fi
                
                    # Replace the current line of the files by empty line
                    sed -i "s|.*`echo $readLine `.*||" $onlyCopyCutActionFile
                    sed -i "s|.*`echo $readLine `.*||" $statusCopyCutActionFile

                    #
                    globalCounterOkay="true"
                else
                    # Replace the current line of the files by empty line
                    sed -i "s|.*`echo $readLine `.*||" $onlyCopyCutActionFile
                    sed -i "s|.*`echo $readLine `.*||" $statusCopyCutActionFile

                    #
                    globalCounterReject="true"
                fi
            done < $onlyCopyCutActionFile

            # Delete the empty lines
            sed -i "1,$ {/^[[:space:]]*$/d}" $onlyCopyCutActionFile
            sed -i "2,$ {/^[[:space:]]*$/d}" $statusCopyCutActionFile
            
            #
            if [[ $globalCounterReject == "true" ]] && [[ $globalCounterOkay == "true" ]]
            then
                echo "~"
                echo "At lease one file or directory was not copied  ‚ö†Ô∏è  ."

                # Reset
                globalCounterReject="false"
                globalCounterOkay="false"
            elif [[ $globalCounterReject == "true" ]] && [[ $globalCounterOkay == "false" ]]
            then
                echo "~"
                echo "Nothing to paste, the source files or directories seem to have been moved  ‚ö†Ô∏è  ."
                echo ""
                # Reset
                globalCounterReject="false"
                globalCounterOkay="false"
            fi
        fi

        # Enable the cursor in the console/terminal
        setterm -cursor on
    else
        if [[ -e "$onlyCopyCutActionFile" ]] && [[ ` wc -l "$onlyCopyCutActionFile" | cut -d " " -f1 ` -lt 1 ]]
        then
            if [[ $indexUP != "none" ]]
            then
                echo "~"
                echo -e "Nothing to paste for the ` colorElem index $indexUP ` \U001F9D0 ."
                echo ""
            else
                echo "~"
                echo -e "Nothing to paste \U001F9D0 ."
            fi
        elif [[ ! ( -e "$onlyCopyCutActionFile" ) ]]
        then
            echo "~"
            echo "Something wrong, missing dependency  ‚ö†Ô∏è  ."
            exit 1
        fi 
    fi

}





:   '
# :param $1 type(string) // Realize action from the request `--copy` or `--cut` request
# :param $2 type(string) // The source (file/directory)
# :param $3 type(string) // The target directory
    '
function pasteActionIn 
{

    # Declaration/Assignation variables
    getTheTargetDir=` echo "$3" |  awk '{ if ( substr($0, length($0), 1) == "/" ) $0 = substr($0, 1, length($0) - 1); print }' `
    getTheTargetDir=` echo "$getTheTargetDir" |  awk '{ if ( substr($0, 1, 2) == "./" ) $0 = substr($0, 3, length($0)); print }' `

    getProperSrc=` echo "$2" |  awk '{ if ( substr($0, 1, 2) == "./" ) $0 = substr($0, 3, length($0)); print }' `
    getProperSrc=` echo "$getProperSrc" |  awk '{ if ( substr($0, length($0), 1) == "/" ) $0 = substr($0, 1, length($0) - 1); print }' `

    getLastElemInSrc=""


    #
    if [[ ` echo "$getProperSrc"  | grep -i -- "/" ` ]]
    then

        getLastElemInSrc=` echo "$getProperSrc" | tac -s "/" | head -n 1 `
    else
        getLastElemInSrc=$getProperSrc
    fi

    #
    if [[ "$3" == "." ]]
    then
        getTheTargetDir=` pwd `
    fi


    #
    setterm --cursor off


    #
    if [[ $1 == "--copy"  ]]
    then
        # Copy the files/directories towards the given directory
        cp -ra "$getProperSrc" "$getTheTargetDir" 2> $fileCodeCommandErrorCp &
                    
        # Store the pid of the last command
        echo "$!" > $fileClassicPidCommandCp

        #
        sleep 0.0005

        # Call the function ->  ` alertNonEffectiveAction `
        alertNonEffectiveAction $fileCodeCommandErrorCp 

        truncate -s 0 $fileCodeCommandErrorCp
                
        #
        touch "$getTheTargetDir/.am-okay-checker-access" 2> $fileCodeCommandReturn
            
        # Call the function ->  ` alertNonEffectiveAction `
        alertNonEffectiveAction $fileCodeCommandReturn

        #
        truncate -s 0 $fileCodeCommandReturn


        # Display the status of the transfer
        /app/usr/lib/am-okay/library/progress-bar-copy.sh "$getProperSrc" "$getTheTargetDir/$getLastElemInSrc"

        # Check to see if the process above was executed correctly
        if [[ ! ( $? -eq 0 ) ]]
        then
            #
            truncate -s 0 $fileCodeCommandReturn 2> /dev/null

            #
            if [[ -e "$fileClassicPidCommandCp" ]]
            then
                rm -rf $fileClassicPidCommandCp 2> /dev/null
            fi

            #
            echo -e "\n"
            echo "~"
            echo -e "The process was interrupted üîå"
            
            #
            setterm --cursor on

            #
            exit 1
        else
            #
            truncate -s 0 $fileCodeCommandReturn 2> /dev/null

            #
            if [[ -e "$fileClassicPidCommandCp" ]]
            then
                rm -rf $fileClassicPidCommandCp 2> /dev/null
            fi
        fi 
    #
    elif [[ $1 == "--cut" ]]
    then
        # Copy the files/directories towards the given directory
        mv --backup=numbered "$getProperSrc" "$getTheTargetDir" 2> $fileCodeCommandErrorMv &
                    
        # Store the pid of the last command
        echo "$!" > $fileClassicPidCommandMv

        #
        sleep 0.0005

        # Call the function ->  ` alertNonEffectiveAction `
        alertNonEffectiveAction $fileCodeCommandErrorMv

        truncate -s 0 $fileCodeCommandErrorMv
                
        #
        touch "$getTheTargetDir/.am-okay-checker-access" 2> $fileCodeCommandReturn
            
        # Call the function ->  ` alertNonEffectiveAction `
        alertNonEffectiveAction $fileCodeCommandReturn

        #
        truncate -s 0 $fileCodeCommandReturn


        # Display the status of the transfer
        /app/usr/lib/am-okay/library/progress-bar-cut.sh "$getProperSrc" "$getTheTargetDir/$getLastElemInSrc"
         
        # Check to see if the process above was executed correctly
        if [[ ! ( $? -eq 0 ) ]]
        then
            #
            truncate -s 0 $fileCodeCommandReturn 2> /dev/null

            #
            if [[ -e "$fileClassicPidCommandMv" ]]
            then
                rm -rf "$fileClassicPidCommandMv" 2> /dev/null
            fi

            #
            echo -e "\n"
            echo "~"
            echo -e "The process was interrupted üîå"
            
            #
            setterm --cursor on

            #
            exit 1
        else
            #
            truncate -s 0 $fileCodeCommandReturn 2> /dev/null

            #
            if [[ -e "$fileClassicPidCommandMv" ]]
            then
                rm -rf "$fileClassicPidCommandMv" 2> /dev/null
            fi
        fi 
    fi

    #
    setterm --cursor on


    #
    if [[ -e "$getTheTargetDir/.am-okay-checker-access" ]]
    then
        rm -r "$getTheTargetDir/.am-okay-checker-access" &> /dev/null
    fi
    
}

### Creation some necessaries files/dirs -> start tag[e0]

# Creation dirs where the error code will be sent
if [[ ! ( -e "/tmp/.$USER/am-okay/$getThisPid" ) ]]
then
    mkdir -p "/tmp/.$USER/am-okay/$getThisPid" 2> /dev/null
    chmod 700 "/tmp/.$USER/am-okay/$getThisPid" 2> /dev/null
fi

#
trap 'rm -r "/tmp/.$USER/am-okay/$getThisPid" 2> /dev/null' SIGINT SIGTERM EXIT 

# Creation the root directory for the `am-okay` actions
if [[ ! ( -e "$rootDirForActions" ) ]]
then
    mkdir -p $rootDirForActions 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction`
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi

# Creating a root directory for the files -> `copyActionFile` and `cutActionFile`
if [[ ! ( -e "$rootDirCopyCutFiles" ) ]]
then
    mkdir -p $rootDirCopyCutFiles 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction`
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi

# Creating of files for the <--copy> action
if [[ ! ( -e "$copyActionFile" ) ]]
then
    touch $copyActionFile 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction` 
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi
#
if [[ ! ( -e "$copyActionFileOnly" )  ]]
then
    touch $copyActionFileOnly 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction` 
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi

# Creating of files for the <--cut> action
if [[ ! ( -e "$cutActionFile" ) ]]
then
    touch $cutActionFile 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction` 
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi
#
if [[ ! ( -e "$cutActionFileOnly" )  ]]
then
    touch $cutActionFileOnly 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction` 
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi

# Creating the directories associated to the `--array` option
if [[ ! ( -e "$arrayRootDir" ) ]]
then
    #
    mkdir -p $arrayRootDir $arrayIndexInitDir $arrayIndex1Dir $arrayIndex2Dir $arrayIndex3Dir 2> $fileCodeCommandReturn
    
    # Call the function <<alertNonEffectiveAction>>
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn

    #
    touch $arrayIndexInitCopyCutActionFile $arrayIndexInitCopyCutActionFileOnly $arrayIndex1CopyCutActionFile \
          $arrayIndex1CopyCutActionFileOnly $arrayIndex2CopyCutActionFile $arrayIndex2CopyCutActionFileOnly \
          $arrayIndex3CopyCutActionFile $arrayIndex3CopyCutActionFileOnly 2> $fileCodeCommandReturn

    # Call the function <<alertNonEffectiveAction>>
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi


# Call the function
(
    while true    
    do
        #
        if ps -p $getThisPid &> /dev/null
        then
            #
            increaseColsLines 
        else
            #
            break 
        fi

        #
        sleep 0.005

    done
) &

### Creation some necessaries files/dirs -> end tag[e0]





### Treatment the `copy` and `cut` actions (directly) -> start tag[i7]

if ( [[ $1 == "--copy"  ]] || [[ $1 == "--cut" ]] \
    || [[ $1 == "-c"  ]] || [[ $1 == "-x"  ]] ) \
    && ( [[ ` echo  "$@" | grep -w -- "--out" ` ]] || [[ ` echo  "$@" | grep -w -- "-o" ` ]] )
then

    # Declaration/Assignation variables
    getNbOfParam=` echo "$#" `
    getTheFirstParam=$1
    getBeforeLastParamPos=$(( getNbOfParam - 1  ))
    getLastParam=${!getNbOfParam}
    tabFileDir=()



    # Check to see if the first parameter is not equal to `--cut` or `--copy` , then
    if [[ $1 != "--copy" ]] && [[ $1 != "--cut" ]] && [[ $1 != "-c" ]] &&  [[ $1 != "-x" ]]
    then
        #
        echo "~"
        echo -e "Invalid request \U001F9D0"

        exit 1
    fi


    #
    if ( [[ "${!getBeforeLastParamPos}" == "--out" ]] || [[ "${!getBeforeLastParamPos}" == "-o" ]] ) \
        && ( [[ -e "${!getNbOfParam}" ]] && [[ -d "${!getNbOfParam}" ]] )
    then
        
        #
        if [[ -e "$getLastParam" ]] && [[ -d "$getLastParam" ]]
        then
            
            # Get all the input parameters
            arrayParam=("$@")

            # Get the current input field separator
            getCurrentIFS=$IFS
            
            # Change the input field separator
            IFS=$'\n'

            # Ignore `--copy` or `--move` option
            shift 1
            
            # Check if the request action is valid 
            for inputParam in "$@"
            do
                #
                if ( [[ $inputParam != "--out" ]] && [[ $inputParam != "-o" ]] )
                then
                    
                    #
                    if [[ -e "$inputParam" ]]
                    then

                        # Add the file or directory to the array 
                        tabFileDir+=("$inputParam")                    
                    else
                        echo "~"
                        echo -e "The file/directory \e[35;1m$inputParam\e[0m does not exist \U001F9D0"

                        exit 1
                    fi
                else
                    #
                    break
                fi
            done
 
            #
            set -- ${arrayParam[@]}
            
            #
            IFS=$getCurrentIFS
        fi

    elif [[ "${!getBeforeLastParamPos}" != "--out" ]] && [[ "${!getBeforeLastParamPos}" != "-o" ]]
    then
        echo "~"
        echo -e "Invalid request \U001F9D0, the option \e[36;1m--out\e[0m has to be in penultimate position"
        exit 1

    elif [[ -e "${!getNbOfParam}" ]] 
    then
        #
        if [[ ! ( -d "${!getNbOfParam}" ) ]]
        then
            #
            echo "~"
            echo -e "The target entry \e[35;1m${!getNbOfParam}\e[0m has to be a directory \U001F9D0"
            exit 1
        fi

    elif [[ ! ( -e "${!getNbOfParam}" ) ]]
    then
        #
        echo "~"
        echo -e "The target directory \e[35;1m${!getNbOfParam}\e[0m was not found \U001F9D0"
        exit 1
    else
        #
        echo "~"
        echo -e "Invalid request \U001F9D0"

        exit 1
    fi


    # Finalize the action `copy` or `cut`
    if [[ $getTheFirstParam == "--copy" ]] || [[ $getTheFirstParam == "-c" ]]
    then
        #
        echo -e ""

        # Backup the `input field separator` , then ...
        saveIFS=$IFS

        # New `input field separator`
        IFS=$'\n'


        # Put the files/dirs in the array
        for dirFile in "${tabFileDir[@]}"
        do
            if [[ "$dirFile" != "$getLastParam" ]]
            then
                # Call the function `pasteActionIn`
                pasteActionIn "--copy" "$dirFile" "$getLastParam" 2> /dev/null 
            else
                echo "~"
                echo -e "Action rejected same source and destination [ $dirFile -> $getLastParam ] ‚ö†Ô∏è  "
                echo ""
            fi
        done
        
        # Restore 
        IFS=$saveIFS

        #
        exit 0

    elif [[ $getTheFirstParam == "--cut"  ]] || [[ $getTheFirstParam == "-x" ]]
    then
        echo ""

        # Backup the `input field separator` , then ...
        saveIFS=$IFS

        # New `input field separator`
        IFS=$'\n'


        # Put the files/dirs in the array
        for dirFile in "${tabFileDir[@]}"
        do
            if [[ "$dirFile" != "$getLastParam" ]]
            then
                # Call the function `pasteActionIn`
                pasteActionIn "--cut" "$dirFile" "$getLastParam" 2> /dev/null 
            else
                echo "~"
                echo -e "Action rejected same source and destination [ $dirFile -> $getLastParam ] ‚ö†Ô∏è  "
                echo ""
            fi

        done
        
        # Restore 
        IFS=$saveIFS

        #
        exit 0
    else
        #
        echo "~"
        echo -e "Invalid request \U001F9D0"

        exit 1
    fi

    exit 0
    
fi

### Treatment the `copy` and `cut` actions (directly) -> end tag[i7]



### Manage the actions done by the [ --copy, --cut, --stat-copy, --stat-cut, --paste-copy, 
#   --paste-cut ] options.
# Here is the path of the python program -> `/app/usr/lib/am-okay/library/progress-bar` . [tag1] 

# Copy or cut action for the `--copy || -c`, `--cut || -c`, or `--array || -a` option as first parameter
if [[ $1 == "--copy" ]] || [[ $1 == "--cut" ]] || [[ $1 == "-c" ]] || [[ $1 == "-x" ]]
then
    #
    if [[ $1 == "--copy" ]] || [[ $1 == "-c" ]]
    then
        # Shift one position -> `--copy`
        shift 1

        #
        arrayDirsFiles=()

        # Backup the `input field separator`
        saveIFS=$IFS
        IFS=$'\n'

        # Put the files/dirs in the array
        for dir_file in "$@"
        do
            arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
            arrayDirsFiles+="?"
        done
        
        # Restore 
        IFS=$saveIFS

        # Call the function `copyCutAction`
        copyCutAction "--copy" "Copy Action" " ` echo ${arrayDirsFiles[@]} ` " "none"
        exit 0

    elif [[ $1 == "--cut" ]] || [[ $1 == "-x" ]]
    then
        # Shift one position -> `--cut`
        shift 1

        #
        arrayDirsFiles=()

        # Backup the `input field separator`
        saveIFS=$IFS
        IFS=$'\n'

        # Put the files/dirs in the array
        for dir_file in "$@"
        do
            arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
            arrayDirsFiles+="?"
        done
        
        # Restore 
        IFS=$saveIFS


        # Call the function `copyCutAction`
        copyCutAction "--cut" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" "none"
        exit 0
    fi 

elif ( [[ $1 == "--array" ]] || [[ $1 == "-a" ]] ) && ( [[ $# -lt 4 ]] ) 
then    
    echo "~"
    echo -e "Invalid request \U001F9D0 ."
    exit 1

elif ( [[ $1 == "--array" ]] || [[ $1 == "-a" ]] ) && ( [[ $2 == "--index" ]] || [[ $2 == "-i" ]] ) && \
    ( ( [[ $4 == "--copy" ]] || [[ $4 == "-c" ]] ) || ( [[ $4 == "--cut" ]] || [[ $4 == "-x" ]] ) ) && \
    ( [[ ` echo "$3" | grep -E "^[0-3]{1,1}$" ` ]] )
then

    # Verify if there is at least five parameters(example : for the target file/dir)
    if [[ $# -lt 5  ]]
    then
        echo "~"
        echo -e "Invalid request \U001F9D0 ."
        exit 1
    fi

    if [[ $2 == "--index" ]] || [[ $2 == "-i" ]]
    then
        if [[ $3 -eq 0 ]]
        then
            if [[ $4 == "--copy" ]] || [[ $4 == "-c" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$'\n'

                # Put the files/dirs in the array
                for dir_file in "$@"
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Copy Action" "` echo ${arrayDirsFiles[@]} `" 0
                exit 0

            elif [[ $4 == "--cut" ]] || [[ $4 == "-x" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$'\n'

                # Put the files/dirs in the array
                for dir_file in "$@"
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" 0
                exit 0
            fi  
        elif [[ $3 -eq 1 ]]
        then
            if [[ $4 == "--copy" ]] || [[ $4 == "-c" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$'\n'

                # Put the files/dirs in the array
                for dir_file in "$@"
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Copy Action" "` echo ${arrayDirsFiles[@]} `" 1
                exit 0

            elif [[ $4 == "--cut" ]] || [[ $4 == "-x" ]]
            then
                # Shift four positions 
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$'\n'

                # Put the files/dirs in the array
                for dir_file in "$@"
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" 1
                exit 0
            fi 
        elif [[ $3 -eq 2 ]]
        then
            if [[ $4 == "--copy" ]] || [[ $4 == "-c" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$'\n'

                # Put the files/dirs in the array
                for dir_file in "$@"
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Copy Action" "` echo ${arrayDirsFiles[@]} `" 2
                exit 0
            elif [[ $4 == "--cut" ]] || [[ $4 == "-x" ]]
            then
                # Shift four positions 
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$'\n'

                # Put the files/dirs in the array
                for dir_file in "$@"
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" 2
                exit 0
            fi 
        elif [[ $3 -eq 3 ]]
        then
            if [[ $4 == "--copy" ]] || [[ $4 == "-c" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$'\n'

                # Put the files/dirs in the array
                for dir_file in "$@"
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Copy Action" "` echo ${arrayDirsFiles[@]} `" 3
                exit 0
            elif [[ $4 == "--cut" ]] || [[ $4 == "-x" ]]
            then
                # Shift four positions 
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$'\n'

                # Put the files/dirs in the array
                for dir_file in "$@"
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" 3
                exit 0
            fi     
        else
            echo "~"
            echo "Something wrong ‚ö†Ô∏è  , index overwhelmed(max 3 -> positive) ."
            exit 1
        fi
    fi
elif ( [[ $1 == "--array" ]] || [[ $1 == "-a" ]] ) && ( ( [[ $4 == "--cut" ]] || [[ $4 == "-x" ]] ) \
    || ( [[ $4 == "--copy" ]] || [[ $4 == "-c" ]] ) ) 
then
    if [[  $# -lt 5  ]]
    then
        echo "~"
        echo -e "Invalid request \U001F9D0 ."
        exit 1
    fi
fi

# Stat of the copy and cut actions done by the [ --copy, --cut, --array ] options 
if [[ $1 == "--stat-copy"  ]] || [[ $1 == "--stat-c"  ]] || [[ $1 == "-sc"  ]]
then
    # Call the function `statAction`
    statAction "--copy" "none"
    exit 0

elif [[ $1 == "--stat-cut" ]] || [[ $1 == "--stat-x" ]] || [[ $1 == "-sx" ]]
then
    # Call the function `statAction`
    statAction "--cut" "none"
    exit 0

elif ( [[ $1 == "--array" ]] || [[ $1 == "-a" ]] ) && ( [[ $# -lt 4 ]] )
then    
    echo "~"
    echo -e "Invalid request \U001F9D0 ."
    exit 1

elif ( [[ $1 == "--array" ]] || [[ $1 == "-a" ]] ) && ( [[ $2 == "--index" ]] || [[ $2 == "-i" ]] ) \
    && ( [[ $# -eq 4 ]] ) && ( [[ $4 == "--stat" ]] || [[ $4 == "-s" ]] ) && \
    ( [[ ` echo "$3" | grep -E "^[0-3]{1,1}-[0-3]{1,1}$" ` ]] \
    || [[ ` echo "$3" | grep -E "^[0-3]{1,1},[0-3]{1,1}$" ` ]] \
    || [[ ` echo "$3" | grep -E "^[0-3]{1,1}$" ` ]] )

then
    if [[ $2 == "--index" ]] || [[ $2 == "-i" ]]
    then
        if [[ $3 == 0 ]] 
        then
            # Call the function `statAction`
            statAction "--array" 0
            exit 0

        elif [[ $3 == 1 ]]
        then
            # Call the function `statAction`
            statAction "--array" 1
            exit 0

        elif [[ $3 == 2 ]]
        then
            # Call the function `statAction`
            statAction "--array" 2
            exit 0

        elif [[ $3 == 3 ]]
        then
            # Call the function `statAction`
            statAction "--array" 3
            exit 0

        elif [[ ` echo "$3" | grep -E "^[0-3]{1,1}-[0-3]{1,1}$" ` ]]
        then
            # Call the function `maxMin`
            getResultArray=$(maxMin $3)
            
            #
            maxValueIndex=` echo ${getResultArray[@]} | cut -d " " -f1 `
            minValueIndex=` echo ${getResultArray[@]} | cut -d " " -f2 `
       
            # Print the status
            for indexUP in ` seq $minValueIndex $maxValueIndex `
            do
                # Call the function `statAction`
                statAction "--array" $indexUP  
            done

            #
            exit 0
        elif [[ ` echo "$3" | grep -E "^[0-3]{1,1},[0-3]{1,1}$" ` ]]
        then
        
            # Call the function `maxMin`
            getResultArray=$(maxMin $3)

            #
            maxValueIndex=` echo ${getResultArray[@]} | cut -d " " -f1 `
            minValueIndex=` echo ${getResultArray[@]} | cut -d " " -f2 `
        
            # Print the status
            for indexUP in `seq 2`
            do
                if [[ $indexUP -eq 1 ]]
                then
                    # Call the function `statAction`
                    statAction "--array" $minValueIndex
                else
                    # Call the function `statAction`
                    statAction "--array" $maxValueIndex
                fi 
            done

            #
            exit 0
        else

            echo "~"
            echo "Something wrong ‚ö†Ô∏è  , index overwhelmed(max 3 -> positive) ."
            exit 1
        fi
    fi
fi

# Paste action for the `--copy`, `--paste`, `--array` options as first parameter
if ( ( [[ $1 == "--paste-copy" ]] || [[ $1 == "--paste-c" ]] || [[ $1 == "-pc" ]] ) || \
    ( [[ $1 == "--paste-cut" ]] || [[ $1 == "--paste-x" ]] || [[ $1 == "-px" ]] ) ) && \
    ( [[ $# -le 2 ]] )
then
    # Declaration variables
    targetDir=""


    # If the number of parameter equal to 1, the target dir is the current working directory , then ...
    if [[ $# -eq 1 ]]
    then
        #
        targetDir=` pwd `

    # Take the second parameter
    elif [[ $# -eq 2 ]]
    then
        targetDir="$2"
    fi

    
    if [[ $1 == "--paste-copy" ]] || [[ $1 == "--paste-c" ]] || [[ $1 == "-pc" ]]
    then
        # Call the function `pasteAction`
        pasteAction "--paste-copy" "$targetDir" "none" "none" 2> /dev/null

        #
        exit 0

    elif [[ $1 == "--paste-cut" ]] || [[ $1 == "--paste-x" ]] || [[ $1 == "-px" ]]
    then
        # Call the function `pasteAction`
        pasteAction "--paste-cut" "$targetDir" "none" "none" 2> /dev/null

        #
        exit 0
    fi    
elif ( [[ $1 == "--array" ]] || [[ $1 == "-a" ]] ) && ( [[ $4 == "--put" ]] || [[ $4 == "-p" ]] ) \
    && ( [[ $2 == "--index" ]] || [[ $2 == "-i" ]] ) && \
    ( [[ ` echo "$3" | grep -E "^[0-3]{1,1}-[0-3]{1,1}$" ` ]] || \
    [[ ` echo "$3" | grep -E "^[0-3]{1,1},[0-3]{1,1}$" ` ]] || \
    [[ ` echo "$3" | grep -E "^[0-3]{1,1}$" ` ]] )
then

    # Declaration variables
    targetDir=""

    

    #
    if [[ $# -lt 4 ]]
    then
        echo "~"
        echo -e "Invalid request \U001F9D0 ."

        exit 1
    fi

    # If the number of parameter equal to 4, the target dir is the current working directory , then ...
    if [[ $# -eq 4 ]]
    then
        #
        targetDir=` pwd `

    # Take the second parameter
    elif [[ $# -eq 5 ]]
    then
        targetDir="$5"
    fi

    
    #
    if [[ $2 == "--index" ]] || [[ $2 == "-i" ]]
    then
        if [[ $3 -eq 0 ]] && [[ ` echo "$3" | grep -vE "[,-]" ` ]]
        then
            # Call the function `pasteAction`
            pasteAction "--array" "$targetDir" 0 "--put" 2> /dev/null

            #
            exit 0
        elif [[ $3 -eq 1 ]] && [[ ` echo "$3" | grep -vE "[,-]" ` ]]
        then
            # Call the function `pasteAction`
            pasteAction "--array" "$targetDir" 1 "--put" 2> /dev/null

            #
            exit 0
        elif [[ $3 -eq 2 ]] && [[ ` echo "$3" | grep -vE "[,-]" ` ]]
        then
            # Call the function `pasteAction`
            pasteAction "--array" "$targetDir" 2 "--put" 2> /dev/null 

            #
            exit 0
        elif [[ $3 -eq 3 ]] && [[ ` echo "$3" | grep -vE "[,-]" ` ]]
        then
            # Call the function `pasteAction`
            pasteAction "--array" "$targetDir" 3 "--put" 2> /dev/null

            #
            exit 0
        elif [[ ` echo "$3" | grep -E "^[0-3]{1,1}[-][0-3]{1,1}$" ` ]] && [[ ` echo "$3" | grep -vE "[,]" ` ]]
        then
            getResultArray=()

            # Call the function `maxMin`
            getResultArray=$(maxMin $3)
            
            #
            maxValueIndex=` echo ${getResultArray[@]} | cut -d " " -f1 `
            minValueIndex=` echo ${getResultArray[@]} | cut -d " " -f2 `
             
            # Print the status
            for indexUP in ` seq $minValueIndex $maxValueIndex `
            do
                # Call the function `pasteAction`
                pasteAction "--array" "$targetDir" $indexUP "--put" 2> /dev/null

            done

            #
            exit 0
        elif [[ ` echo "$3" | grep -E "^[0-3]{1,1}[,][0-3]{1,1}$" ` ]]
        then
            getResultArray=()

            # Call the function `maxMin`
            getResultArray=$(maxMin $3)
            
            #
            maxValueIndex=` echo ${getResultArray[@]} | cut -d " " -f1 `
            minValueIndex=` echo ${getResultArray[@]} | cut -d " " -f2 `
             
            # Print the status
            for indexUP in `seq 1 2`
            do
                if [[ $indexUP -eq 1 ]]
                then
                    # Call the function `pasteAction`
                    pasteAction "--array" "$targetDir" $minValueIndex "--put" 2> /dev/null 
                else
                    # Call the function `pasteAction`
                    pasteAction "--array" "$targetDir" $maxValueIndex "--put" 2> /dev/null
                fi 
            done

            #
            exit 0
        fi
    fi
fi

### End of [tag1]





### Reset action . [tag2]
#
if ( [[ $1 == "--reset" ]] || [[ $1 == "-r" ]] ) && ( [[ $# -eq 2 ]] ) && ( [[ $2 == "request" ]] )
then
    # Declaration variables
    choiceUP=""
    requestQuit=""

    while [[ $choiceUP != "exit" ]]
    do
        echo "~"
        echo -e "Make your choice for the reset (encode \`$(colorElem "exit")\` to quit) <:> "
        echo ""
        echo -e "Choice \`$(colorElem 0)\` to reset a copy action"
        echo -e "Choice \`$(colorElem 1)\` to reset a cut action"
        echo -e "Choice \`$(colorElem 2)\` to reset both \`$(colorElem 0)\` and \`$(colorElem 1)\` choices"
        echo -e ""
        echo -e "Choice \`$(colorElem 3)\` to reset an array action index $(colorElem 0)"
        echo -e "Choice \`$(colorElem 4)\` to reset an array action index $(colorElem 1)"
        echo -e "Choice \`$(colorElem 5)\` to reset an array action index $(colorElem 2)"
        echo -e "Choice \`$(colorElem 6)\` to reset an array action index $(colorElem 3)"
        echo -e "Choice \`$(colorElem 7)\` to reset all array actions(from choice \`$(colorElem 3)\` to \`$(colorElem 6)\`)"
        
        #
        read -p "Your choice : " choiceUP 

        if [[ $choiceUP == "exit" ]]
        then
            break
        fi
        
        if [[ $choiceUP -eq 2 ]]
        then
            # Call the function `truncateFileData`
            truncateFileData $copyActionFileOnly $cutActionFileOnly $copyActionFile $cutActionFile

            # Call the function
            removePidFile $fileClassicPidCommandMv $fileClassicPidCommandCp
            
            #
            read -p "Do you want to quit [y/n] : " requestQuit

            #
            if [[ $requestQuit == "y" ]]
            then
                # Stop the loop
                break
            fi
        elif [[ $choiceUP -eq 7 ]]
        then
            # Call the function `truncateFileData`
            truncateFileData $arrayIndexInitCopyCutActionFileOnly $arrayIndex1CopyCutActionFileOnly \
                $arrayIndex2CopyCutActionFileOnly $arrayIndex3CopyCutActionFileOnly \
                $arrayIndexInitCopyCutActionFile $arrayIndex1CopyCutActionFile $arrayIndex2CopyCutActionFile \
                $arrayIndex3CopyCutActionFile
            
            # Call the function
            removePidFile $fileClassicPidCommandMv $fileClassicPidCommandCp $fileArrayInitCommandMvCp \
                $fileArrayOneCommandMvCp $fileArrayTwoCommandMvCp $fileArrayThreeCommandMvCp
            
            #
            read -p "Do you want to quit [y/n] : " requestQuit

            #
            if [[ $requestQuit == "y" ]]
            then
                # Stop the loop
                break
            fi
        elif [[ ` echo $choiceUP | grep -E "^[0-1]{1,1}$" ` ]]
        then
            case $choiceUP in 
                0)
                    # Call the function `truncateFileData`
                    truncateFileData $copyActionFileOnly  $copyActionFile

                    # Call the function
                    removePidFile $fileClassicPidCommandCp

                    ;;
                1)
                    # Call the function `truncateFileData`
                    truncateFileData $cutActionFileOnly $cutActionFile

                    # Call the function
                    removePidFile $fileClassicPidCommandMv
            esac

            #
            read -p "Do you want to quit [y/n] : " requestQuit

            #
            if [[ $requestQuit == "y" ]]
            then
                # Stop the loop
                break
            fi
        elif [[ ` echo $choiceUP | grep -E "^[3-6]{1,1}" ` ]]
        then
            case $choiceUP in
                3)
                    # Call the function `truncateFileData`
                    truncateFileData $arrayIndexInitCopyCutActionFileOnly $arrayIndexInitCopyCutActionFile

                    # Call the function 
                    removePidFile $fileArrayInitCommandMvCp

                    ;;
                4)
                    # Call the function `truncateFileData`
                    truncateFileData $arrayIndex1CopyCutActionFileOnly $arrayIndex1CopyCutActionFile

                    # Call the function
                    removePidFile $fileArrayOneCommandMvCp

                    ;;
                5)
                    # Call the function `truncateFileData`
                    truncateFileData $arrayIndex2CopyCutActionFileOnly $arrayIndex2CopyCutActionFile

                    # Call the function
                    removePidFile $fileArrayTwoCommandMvCp

                    ;;
                6)
                    # Call the function `truncateFileData`
                    truncateFileData $arrayIndex3CopyCutActionFileOnly $arrayIndex3CopyCutActionFile

                    # Call the function
                    removePidFile $fileArrayThreeCommandMvCp
            esac

            #
            read -p "Do you want to quit [y/n] : " requestQuit

            #
            if [[ $requestQuit == "y" ]]
            then
                # Stop the loop
                break
            fi
        fi
    done
    
    #
    exit 0
fi

### End of [tag2]


### Print some files linked to the options `--doc` and `--help` . [tag3]

if [[ $1 == "--doc" ]] && [[ $# -eq 1 ]]
then
    cat /app/usr/lib/am-okay/documentation/am-okay-doc 2> /dev/null 
    exit 0
elif [[ $1 == "--help" ]] && [[ $# -eq 1 ]]
then
    cat /app/usr/lib/am-okay/documentation/am-okay-help 2> /dev/null 
    exit 0
elif [[ $1 == "--version" ]] && [[ $# -eq 1 ]]
then
    cat /app/usr/lib/am-okay/documentation/am-okay-version-pure 2> /dev/null
    exit 0
fi

### End of [tag3]
echo "~"
echo -e "Invalid request \U001F9D0 ."
exit 1
