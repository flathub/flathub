diff -ur distrho-ports-2/libs/juce/source/modules/juce_graphics/colour/juce_PixelFormats.h distrho-ports-1/libs/juce/source/modules/juce_graphics/colour/juce_PixelFormats.h
--- distrho-ports-2/libs/juce/source/modules/juce_graphics/colour/juce_PixelFormats.h	2018-04-04 12:45:01.000000000 -0400
+++ distrho-ports-1/libs/juce/source/modules/juce_graphics/colour/juce_PixelFormats.h	2020-04-28 10:38:10.259129506 -0400
@@ -109,19 +109,6 @@
     forcedinline uint8 getGreen() const noexcept      { return components.g; }
     forcedinline uint8 getBlue() const noexcept       { return components.b; }
 
-   #if JUCE_GCC
-    // NB these are here as a workaround because GCC refuses to bind to packed values.
-    forcedinline uint8& getAlpha() noexcept           { return comps [indexA]; }
-    forcedinline uint8& getRed() noexcept             { return comps [indexR]; }
-    forcedinline uint8& getGreen() noexcept           { return comps [indexG]; }
-    forcedinline uint8& getBlue() noexcept            { return comps [indexB]; }
-   #else
-    forcedinline uint8& getAlpha() noexcept           { return components.a; }
-    forcedinline uint8& getRed() noexcept             { return components.r; }
-    forcedinline uint8& getGreen() noexcept           { return components.g; }
-    forcedinline uint8& getBlue() noexcept            { return components.b; }
-   #endif
-
     //==============================================================================
     /** Copies another pixel colour over this one.
 
@@ -340,9 +327,6 @@
     {
         uint32 internal;
         Components components;
-       #if JUCE_GCC
-        uint8 comps[4];  // helper struct needed because gcc does not allow references to packed union members
-       #endif
     };
 }
 #ifndef DOXYGEN
