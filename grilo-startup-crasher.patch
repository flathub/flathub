From 0711247c17934a2abfd170f29a043965374979a6 Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Fri, 16 Nov 2018 13:24:13 +0100
Subject: [PATCH 1/2] registry: Fix g_hash_table_iter_next() warning

As we loop through the sources as listed in the hash table, there's a
good chance that the hash table will be modified as sources are added or
removed. But as we shouldn't be modifying the hash table while it's
being iterated over, the code throws a warning, and will exit the loop.

Warning: g_hash_table_iter_next: assertion 'ri->version == ri->hash_table->version' failed

Solve this by getting a list of all the sources in advance.
---
 src/grl-registry.c | 23 ++++++++++++++++-------
 1 file changed, 16 insertions(+), 7 deletions(-)

diff --git a/src/grl-registry.c b/src/grl-registry.c
index 4124ddd..c03be54 100644
--- a/src/grl-registry.c
+++ b/src/grl-registry.c
@@ -220,17 +220,22 @@ network_changed_cb (GObject     *gobject,
 {
   GNetworkConnectivity connectivity;
   gboolean network_available;
-  GHashTableIter iter;
   GrlSource *current_source;
+  GList *sources, *l;
 
   GRL_DEBUG ("Network availability changed");
   get_connectivity (registry, &connectivity, &network_available);
 
+  sources = g_hash_table_get_values (registry->priv->sources);
+  if (!sources)
+    return;
+
   if (!network_available) {
-    g_hash_table_iter_init (&iter, registry->priv->sources);
+    for (l = sources; l != NULL; l = l->next) {
+      const char **tags;
 
-    while (g_hash_table_iter_next (&iter, NULL, (gpointer *) &current_source)) {
-      const char **tags = grl_source_get_tags (current_source);
+      current_source = l->data;
+      tags = grl_source_get_tags (current_source);
 
       if (!tags)
         continue;
@@ -245,9 +250,11 @@ network_changed_cb (GObject     *gobject,
       }
     }
   } else {
-    g_hash_table_iter_init (&iter, registry->priv->sources);
-    while (g_hash_table_iter_next (&iter, NULL, (gpointer *) &current_source)) {
-      const char **tags = grl_source_get_tags (current_source);
+    for (l = sources; l != NULL; l = l->next) {
+      const char **tags;
+
+      current_source = l->data;
+      tags = grl_source_get_tags (current_source);
 
       if (!tags)
         continue;
@@ -279,6 +286,8 @@ network_changed_cb (GObject     *gobject,
       }
     }
   }
+
+  g_list_free (sources);
 }
 
 static void
-- 
2.19.1


From 79b36bc51aafebfb1f2e91ee4111bab948a29333 Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Fri, 16 Nov 2018 14:38:58 +0100
Subject: [PATCH 2/2] registry: Fix possible crasher on startup in Totem

When announcing that a source was added, the application might choose to
say "actually, I'm not interested in this source" and unref it. As we
want to be able to carry on checking some of its properties, such as
tags, we either need to check whether the source was finalized in
between calls, or keep a list of sources to be added/removed after we've
done computation.

The latter is easier to implement, so add all sources to temporary lists
to avoid the tags disappearing from under us when emitting the signals.

See https://github.com/flathub/org.gnome.Totem/issues/6
---
 src/grl-registry.c | 25 +++++++++++++++++++------
 1 file changed, 19 insertions(+), 6 deletions(-)

diff --git a/src/grl-registry.c b/src/grl-registry.c
index c03be54..2aedfa5 100644
--- a/src/grl-registry.c
+++ b/src/grl-registry.c
@@ -250,6 +250,10 @@ network_changed_cb (GObject     *gobject,
       }
     }
   } else {
+    GList *to_add, *to_remove;
+
+    to_add = to_remove = NULL;
+
     for (l = sources; l != NULL; l = l->next) {
       const char **tags;
 
@@ -263,8 +267,7 @@ network_changed_cb (GObject     *gobject,
           SOURCE_IS_INVISIBLE(current_source)) {
         GRL_DEBUG ("Local network became available for '%s', showing",
                    grl_source_get_id (current_source));
-        SET_INVISIBLE_SOURCE(current_source, FALSE);
-        g_signal_emit (registry, registry_signals[SIG_SOURCE_ADDED], 0, current_source);
+        to_add = g_list_prepend (to_add, current_source);
       }
 
       if (g_strv_contains (tags, INTERNET_NET_TAG) &&
@@ -272,8 +275,7 @@ network_changed_cb (GObject     *gobject,
           SOURCE_IS_INVISIBLE(current_source)) {
         GRL_DEBUG ("Internet became available for '%s', showing",
                    grl_source_get_id (current_source));
-        SET_INVISIBLE_SOURCE(current_source, FALSE);
-        g_signal_emit (registry, registry_signals[SIG_SOURCE_ADDED], 0, current_source);
+        to_add = g_list_prepend (to_add, current_source);
       }
 
       if (g_strv_contains (tags, INTERNET_NET_TAG) &&
@@ -281,10 +283,21 @@ network_changed_cb (GObject     *gobject,
           !SOURCE_IS_INVISIBLE(current_source)) {
         GRL_DEBUG ("Internet became unavailable for '%s', hiding",
                    grl_source_get_id (current_source));
-        SET_INVISIBLE_SOURCE(current_source, TRUE);
-        g_signal_emit (registry, registry_signals[SIG_SOURCE_REMOVED], 0, current_source);
+        to_remove = g_list_prepend (to_remove, current_source);
       }
     }
+
+    for (l = to_add; l != NULL; l = l->next) {
+      SET_INVISIBLE_SOURCE(l->data, FALSE);
+      g_signal_emit (registry, registry_signals[SIG_SOURCE_ADDED], 0, l->data);
+    }
+    g_list_free (to_add);
+
+    for (l = to_remove; l != NULL; l = l->next) {
+        SET_INVISIBLE_SOURCE(l->data, TRUE);
+        g_signal_emit (registry, registry_signals[SIG_SOURCE_REMOVED], 0, l->data);
+    }
+    g_list_free (to_remove);
   }
 
   g_list_free (sources);
-- 
2.19.1

