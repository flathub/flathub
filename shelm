#!/usr/bin/env bash

set -eu -o pipefail

usage() {
	cat <<EOF
shelm fetch           Fetch and unpack elm dependencies, and generate version database
shelm generate        Build version database to match unpacked dependencies
shelm <cmd> <args>... Pass through to elm
EOF
}

fail() {
	echo error: "$@" 1>&2
	exit 1
}

# Set up some global variables and the package cache directories.
init() {
	[ ! -f elm.json ] && fail "elm.json not found in current directory"

	elmhome=$(pwd)/elm-stuff/home
	mkdir -p "$elmhome"

	elmversion=$(json_elm_version < elm.json)

	case $elmversion in
	0.19.0)
		pkgdir="$elmhome"/.elm/0.19.0/package
		registry="$pkgdir"/versions.dat
		;;
	0.19.1)
		pkgdir="$elmhome"/.elm/0.19.1/packages
		registry="$pkgdir"/registry.dat
		;;
	*)
		fail "unsupported elm version: $elmversion"
		;;
	esac
	mkdir -p "$pkgdir"
}

# query the elm version from elm.json
json_elm_version() {
	jq -r '."elm-version"'
}

# collect dependencies from elm.json
json_dependencies() {
	jq -r '.dependencies.direct+.dependencies.indirect
			| to_entries[]
			| [.key, .value]
			| @tsv'
}

# find a dependency by name
json_dependency_version() {
	jq -r '.dependencies.direct+.dependencies.indirect | ."'"$1"'"'
}

# read location from elm.json, defaulting to github location
json_location() {
	pkgname="$1"
	jq '.dependencies.locations."'"$pkgname"'" //
		{ "method": "github", "name": "'"$pkgname"'" }'
}

fetch_github_release() {
	pkgname="$1"
	version="$2"
	curlargs=-sSLf # no progress, show errors, follow redirects, exit with error on HTTP status >=400
	url="https://github.com/$pkgname/archive/$version.tar.gz"
	echo "fetching $url"
	curl "$curlargs" "$url" | tar -xz
}

fetch_git_ref() {
	url="$1"
	ref="$2"
	dest="$3"
	mkdir "$dest"
	cd "$dest" || return
	git init -q
	git remote add origin "$url"
	echo "fetching $ref from $url"
	git fetch -q origin
	git checkout -q "$ref"
	rm -rf .git
}

# Fetch a single version of a dependency. Expects to be passed an
# empty working directory. Archives are usually fetched like elm
# does from github releases, but are fetched using other methods
# if specified elm.json:dependencies.locations.
fetch() {
	tmpdir="$1"
	pkgname="$2"
	version="$3"

	location="$(json_location "$pkgname" < elm.json)"
	method="$(jq -r '.method' <<< "$location")"
	case "$method" in
	github)
		name="$(jq -r '.name' <<< "$location")"
		(cd "$tmpdir" && fetch_github_release "$name" "$version")
		;;
	file)
		path="$(jq -r '.path' <<< "$location")"
		echo "copying $path"
		cp -r "$path" "$tmpdir"/"$version"
		;;
	git)
		url="$(jq -r '.url' <<< "$location")"
		ref="$(jq -r '.ref // "'"$version"'"' <<< "$location")"
		(cd "$tmpdir" && fetch_git_ref "$url" "$ref" "$version")
		;;
	*)
		fail "unknown location method: $method"
		;;
	esac
}

# List dependencies in the local package cache, in the form $author/$project/$version.
list_dependencies() {
	cd "$pkgdir" && find . -maxdepth 3 -mindepth 3 -type d | sed 's|^./||'
}

# Prune dependencies from the local package cache that don't match the required
# dependency versions. This is necessary due to the limitation to one version
# per package of the registry generators.
prune_dependencies() {
	list_dependencies | while IFS=/ read -r author project version
	do
		dep="$(json_dependency_version "$author/$project" < elm.json)"
		if [ "$version" != "$dep" ]; then
			echo "pruning stale dependency $author/$project-$version"
			rm -r "${pkgdir:?}/$author/$project/$version"
		fi
	done
}

# Fetch Elm dependency source archives into local package cache.
fetch_dependencies() {
	unpack=$(mktemp -d)
	json_dependencies < elm.json | while read -r name version; do
		mkdir -p "$pkgdir"/"$name"
		dest="$pkgdir"/"$name"/"$version"

		[ -f "$dest"/elm.json ] && continue

		[ -d "$dest" ] && rm -r "$dest"
		fetch "$unpack" "$name" "$version"
		mv "$unpack"/* "$dest"
	done
	rm -r "$unpack"
}

# Haskell binary encoding helpers

# Haskell binary encoding of integers as 8 bytes big-endian
encode_int64() {
	hex=$(printf "%016x" "$1")
	printf "%b%b%b%b%b%b%b%b" \
		"\\x${hex:0:2}" "\\x${hex:2:2}" "\\x${hex:4:2}" "\\x${hex:6:2}" \
		"\\x${hex:8:2}" "\\x${hex:10:2}" "\\x${hex:12:2}" "\\x${hex:14:2}"
}

# Haskell binary encoding of UTF8 strings
encode_string() {
	encode_int64 ${#1}
	printf "%s" "$1"
}

# Haskell binary encoding of bytes
encode_byte() {
	hex=$(printf "%02x" "$1")
	printf "%b" "\\x${hex}"
}

# Elm 0.19.1 compact encoding of short UTF8 strings
encode_string_short() {
	encode_byte ${#1}
	printf "%s" "$1"
}

# Build Elm 0.19.0 versions.dat
build_versions_dat() {
	cd "$pkgdir" || return
	count=$(list_dependencies | wc -l)
	(	
		# total number of versions
		encode_int64 "$count"
		# number of packages
		encode_int64 "$count"

		list_dependencies \
			| sort -t / -k 1,1 -k 2,2 \
			| while IFS=/ read -r author project version
		do
			pkg=$author/$project
			[ "$pkg" = "${prevpkg:-}" ] && fail "multiple versions of package $pkg"

			# $pkg and $prevpkg are local to the subshell that runs this while loop,
			# so the warnings about interference with build_registry_dat below are
			# irrelevant.
			# shellcheck disable=SC2030
			prevpkg="$author"/"$project"

			encode_string "$author"
			encode_string "$project"

			# number of versions
			encode_int64 1

			# only version
			IFS=. read -ra vparts <<< "$version"
			encode_byte "${vparts[0]}"
			encode_byte "${vparts[1]}"
			encode_byte "${vparts[2]}"
		done
	)
}

# Build Elm 0.19.1 registry.dat
build_registry_dat() {
	cd "$pkgdir" || return
	count=$(list_dependencies | wc -l)
	(	
		# total number of versions
		encode_int64 "$count"
		# number of packages
		encode_int64 "$count"

		list_dependencies \
			| sort -t / -k 1,1 -k 2,2 \
			| while IFS=/ read -r author project version
		do
			pkg=$author/$project
			# shellcheck disable=SC2031
			[ "$pkg" = "${prevpkg:-}" ] && fail "multiple versions of package $pkg"
			prevpkg="$author"/"$project"

			encode_string_short "$author"
			encode_string_short "$project"

			# newest (only) version
			IFS=. read -ra vparts <<< "$version"
			encode_byte "${vparts[0]}"
			encode_byte "${vparts[1]}"
			encode_byte "${vparts[2]}"

			# number of extra versions
			encode_int64 0
		done
	)
}

# generate a registry file appropriate to the Elm version,
# based on previously fetched dependencies
generate() {
	echo "generating $registry"
	case "$elmversion" in
	0.19.0)
		build_versions_dat > "$registry"
		;;
	0.19.1)
		build_registry_dat > "$registry"
		;;
	esac
}


case "$1" in
""|help|-*)
	usage
	;;
fetch)
	init
	prune_dependencies
	fetch_dependencies
	generate
	;;
generate)
	init
	generate
	;;
*)
	init
	[ ! -f "$registry" ] && fail "registry missing, please fetch and generate first"
	HOME="$elmhome" HTTP_PROXY=. elm "$@"
	;;
esac
