diff --git a/source/ogre/CarModel_Create.cpp b/source/ogre/CarModel_Create.cpp
index 834eac71..ce9c8ec5 100644
--- a/source/ogre/CarModel_Create.cpp
+++ b/source/ogre/CarModel_Create.cpp
@@ -130,7 +130,7 @@ void CarModel::Load(int startId)
 
 	///  load config .car
 	string pathCar;
-	pApp->gui->GetCarPath(&pathCar, 0, 0, sDirname, pApp->mClient);  // force orig for newtorked games
+	pApp->gui->GetCarPath(&pathCar, 0, 0, sDirname, pApp->mClient.get());  // force orig for newtorked games
 	LoadConfig(pathCar);
 	
 	
diff --git a/source/vdrift/cartire.cpp b/source/vdrift/cartire.cpp
index dd6dd487..ce067f3b 100644
--- a/source/vdrift/cartire.cpp
+++ b/source/vdrift/cartire.cpp
@@ -114,7 +114,7 @@ MATHVECTOR<Dbl,3> CARTIRE::GetForce(
 	alpha = -atan2(hub_velocity[1], denom) * 180.0/PI_d;
 
 	/*crash dyn obj--*/
-	if (isnan(alpha) || isnan(1.f/sigma_hat))
+	if (std::isnan(alpha) || std::isnan(1.f/sigma_hat))
 	{
 		MATHVECTOR<Dbl,3> outvec(0, 0, 0);
 		return outvec;
@@ -124,15 +124,15 @@ MATHVECTOR<Dbl,3> CARTIRE::GetForce(
 	Dbl gamma = current_camber * 180.0/PI_d;
 
 	//  beckman method for pre-combining longitudinal and lateral forces
-	Dbl s = sigma / sigma_hat;  assert(!isnan(s));
-	Dbl a = alpha / alpha_hat;  assert(!isnan(a));
+	Dbl s = sigma / sigma_hat;  assert(!std::isnan(s));
+	Dbl a = alpha / alpha_hat;  assert(!std::isnan(a));
 
 	Dbl rho = std::max( sqrt( s*s+a*a ), 0.0001);  //avoid divide by zero
-	assert(!isnan(rho));
+	assert(!std::isnan(rho));
 
 	Dbl max_Fx(0), max_Fy(0), max_Mz(0);
-	Dbl Fx = (s / rho) * Pacejka_Fx( rho*sigma_hat, Fz,        friction_coeff, max_Fx );  assert(!isnan(Fx));
-	Dbl Fy = (a / rho) * Pacejka_Fy( rho*alpha_hat, Fz, gamma, friction_coeff, max_Fy );  assert(!isnan(Fy));
+	Dbl Fx = (s / rho) * Pacejka_Fx( rho*sigma_hat, Fz,        friction_coeff, max_Fx );  assert(!std::isnan(Fx));
+	Dbl Fy = (a / rho) * Pacejka_Fy( rho*alpha_hat, Fz, gamma, friction_coeff, max_Fy );  assert(!std::isnan(Fy));
 	Dbl Mz = Pacejka_Mz( sigma, alpha, Fz, gamma, friction_coeff, max_Mz );
 
 	if (slips)  // out vis
diff --git a/source/vdrift/model_obj.cpp b/source/vdrift/model_obj.cpp
index 338d1220..91231c8d 100644
--- a/source/vdrift/model_obj.cpp
+++ b/source/vdrift/model_obj.cpp
@@ -205,7 +205,7 @@ bool MODEL_OBJ::Save(const std::string & strFileName, std::ostream & error_outpu
 	std::ofstream f(strFileName.c_str());
 	if (!f)
 	{
-		error_output << "Error opening file for writing: " << error_output << endl;
+		error_output << "Error opening file for writing: " << strFileName << endl;
 		return false;
 	}
 	
diff --git a/source/vdrift/texture.h b/source/vdrift/texture.h
index b21846a7..793c0073 100644
--- a/source/vdrift/texture.h
+++ b/source/vdrift/texture.h
@@ -125,7 +125,7 @@ class TEXTURELIBRARY
 		bool FileExists(const std::string & filename)
 		{
 			std::ifstream f(filename.c_str());
-			return f;
+			return f.is_open();
 		}
 
 	public:
diff --git a/source/road/PaceNotesGen.cpp b/source/road/PaceNotesGen.cpp
index f7cdea64..055fdc8d 100644
--- a/source/road/PaceNotesGen.cpp
+++ b/source/road/PaceNotesGen.cpp
@@ -30,7 +30,7 @@ void PaceNotes::Rebuild(SplineRoad* road, Scene* sc, bool reversed)
 
 	Destroy();
 	
-	if (road->getNumPoints() < 2)
+	if (road->getNumPoints() < 2 || !mTerrain)
 		return;
 
 	//  const, vis
@@ -349,7 +349,7 @@ void PaceNotes::Rebuild(SplineRoad* road, Scene* sc, bool reversed)
 		num = gho.getNumFrames();
 	}
 	
-	if (num > 0)
+	if (num > 0 && mTerrain)
 	{
 		Vector3 pos;
 		//  terrain height
