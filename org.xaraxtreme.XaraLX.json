{
    "app-id": "org.xaraxtreme.XaraLX",
    "runtime": "org.gnome.Platform",
    "runtime-version": "3.28",
    "sdk": "org.gnome.Sdk",
    "command": "xaralx",
    "rename-icon": "xaralx",
    "rename-desktop-file": "xaralx.desktop",
    "rename-appdata-file": "xaralx.appdata.xml",
    "finish-args": [
        "--share=ipc",
        "--socket=x11",
        "--socket=pulseaudio",
        "--share=network",
        "--filesystem=host",
        "--talk-name=org.gtk.vfs", "--talk-name=org.gtk.vfs.*",
        "--device=dri"
    ],
    "build-options" : {
        "cflags": "-O2 -g -Wno-deprecated-declarations -fstack-protector-strong -D_FORTIFY_SOURCE=2",
        "cxxflags": "-O2 -g -Wno-deprecated-declarations -fstack-protector-strong -D_FORTIFY_SOURCE=2",
        "ldflags": "-fstack-protector-strong -Wl,-z,relro,-z,now",
        "env": {
            "V": "1"
        }
    },
    "modules": [
        {
            "name": "dos2unix",
            "no-autogen": true,
            "sources": [
                {
                    "type": "archive",
                    "url": "https://waterlan.home.xs4all.nl/dos2unix/dos2unix-7.4.0.tar.gz",
                    "sha256": "bac765abdbd95cdd87a71989d4382c32cf3cbfeee2153f0086cb9cf18261048a"
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'fix Makefile';",
                        "sed -r -i 's#^([[:blank:]]*)(prefix[[:blank:]]*=[[:blank:]]*)(.*)(/usr)(/|[[:blank:]]|$)(.*)$#\\1\\2\\3/app/opt/dos2unix\\5\\6#' 'Makefile';",
                        "grep -Ei '/usr' 'Makefile' || :;"
                    ]
                }
            ],
            "post-install": [
                "echo 'post-install: docs';",
                "install -d '/app/opt/dos2unix/share/doc/dos2unix'; install -p -m 0644 'man/man1/dos2unix.htm' 'BUGS.txt' 'ChangeLog.txt' 'DEVEL.txt' 'INSTALL.txt' 'NEWS.txt' 'README.txt' 'TODO.txt' '/app/opt/dos2unix/share/doc/dos2unix/';",
                "echo 'post-install: licenses';",
                "install -d '/app/opt/dos2unix/share/licenses/dos2unix'; install -p -m 0644 'COPYING.txt' '/app/opt/dos2unix/share/licenses/dos2unix/';"
            ],
            "cleanup": [
                "/opt/dos2unix/share/doc",
                "/opt/dos2unix/share/man"
            ]
        },
        {
            "name": "xmlstarlet",
            "config-opts": [
                "--disable-static-libs",
                "--with-libxml-libs-prefix=/usr/lib",
                "--with-libxml-include-prefix=/usr/include/libxml2",
                "--prefix=/app/opt/xmlstarlet",
                "--exec-prefix=/app/opt/xmlstarlet"
            ],
            "sources": [
                {
                    "type": "archive",
                    "url": "http://downloads.sourceforge.net/xmlstar/xmlstarlet-1.6.1.tar.gz",
                    "sha256": "15d838c4f3375332fd95554619179b69e4ec91418a3a5296e7c631b7ed19e7ca"
                },
                {
                    "type": "patch",
                    "path": "xmlstarlet-1.6.1-nogit.patch",
                    "strip-components": 1,
                    "sha256": "c54485c5e2bd038219884250228333113a9751e999baa28a833a679f79421890"
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'fix configure: xml2 & xslt';",
                        "sed -r -i 's/^([[:blank:]]*XSTAR_LIB_CHECK[[:blank:]]*\\(\\[LIBXML\\],[[:blank:]]*\\[)xml2-config(\\]\\))/\\1pkg-config libxml-2.0\\2/' 'configure.ac';",
                        "sed -r -i 's/^([[:blank:]]*XSTAR_LIB_CHECK[[:blank:]]*\\(\\[LIBXSLT\\],[[:blank:]]*\\[)xslt-config(\\]\\))/\\1pkg-config libxslt\\2/' 'configure.ac';",
                        "grep -Ei 'XSTAR_LIB_CHECK' 'configure.ac' || :;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'fix configure: xml2 & xslt version';",
                        "sed -r -i 's/^(\\[LIBXML_REQUIRED_VERSION=)/#\\1/' 'configure.ac';",
                        "sed -r -i 's/^(\\[LIBXSLT_REQUIRED_VERSION=)/#\\1/' 'configure.ac';",
                        "grep -Ei '_REQUIRED_VERSION' 'configure.ac' || :;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'autoreconf';",
                        "cp -p /usr/share/automake-*/config.{sub,guess} .;",
                        "autoreconf -i;"
                    ]
                }
            ],
            "post-install": [
                "echo 'post-install: symlink';",
                "[[ -f '/app/opt/xmlstarlet/bin/xmlstarlet' ]] || ln -s 'xml' '/app/opt/xmlstarlet/bin/xmlstarlet';",
                "echo 'post-install: docs';",
                "install -d '/app/opt/xmlstarlet/share/doc/xmlstarlet'; install -p -m 0644 'AUTHORS' 'ChangeLog' 'INSTALL' 'NEWS' 'README' 'TODO' '/app/opt/xmlstarlet/share/doc/xmlstarlet/';",
                "echo 'post-install: licenses';",
                "install -d '/app/opt/xmlstarlet/share/licenses/xmlstarlet'; install -p -m 0644 'COPYING' 'Copyright' '/app/opt/xmlstarlet/share/licenses/xmlstarlet/';"
            ],
            "cleanup": [
                "/opt/xmlstarlet/share/doc",
                "/opt/xmlstarlet/share/man"
            ]
        },
        {
            "name": "imagemagick",
            "no-parallel-make": true,
            "config-opts": [
                "--enable-shared",
                "--disable-static",
                "--with-modules",
                "--with-x",
                "--with-threads",
                "--with-magick_plus_plus",
                "--with-gslib",
                "--with-wmf",
                "--with-webp",
                "--with-openexr",
                "--with-rsvg",
                "--with-xml",
                "--with-jbig",
                "--with-openjp2",
                "--prefix=/app",
                "--exec-prefix=/app"
            ],
            "sources": [
                {
                    "type": "archive",
                    "url": "https://www.imagemagick.org/download/ImageMagick-6.9.9-43.tar.xz",
                    "sha256": "66c2937728ae3f385d84691a360d74993675f43ae16236773daa3a49c3ea6e27"
                },
                {
                    "type": "patch",
                    "path": "ImageMagick-6.9.9-3-multiarch-implicit-pkgconfig-dir.patch",
                    "strip-components": 1,
                    "sha256": "80eea73e19a47cdb322d9006d4fe4a868db0d0d43fd7a0c9ae1a5e2fbbdbfe4b"
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'copy examples';",
                        "mkdir 'Magick++/examples'; cp -p Magick++/demo/*.cpp Magick++/demo/*.miff Magick++/examples;"
                    ]
                }
            ],
            "post-install": [
                "echo 'post-install: docs';",
                "install -d '/app/share/doc/imagemagick'; install -p -m 0644 'AUTHORS.txt' 'ChangeLog' 'Install-mac.txt' 'Install-unix.txt' 'Install-vms.txt' 'Install-windows.txt' 'NEWS.txt' 'NOTICE' 'Platforms.txt' 'README.txt' 'QuickStart.txt' '/app/share/doc/imagemagick/';",
                "install -d '/app/share/doc/imagemagick/Magick++'; install -p -m 0644 'Magick++/AUTHORS' 'Magick++/ChangeLog' 'Magick++/NEWS' 'Magick++/README' '/app/share/doc/imagemagick/Magick++/';",
                "install -d '/app/share/doc/imagemagick/Magick++/examples'; install -p -m 0644 Magick++/examples/* '/app/share/doc/imagemagick/Magick++/examples/';",
                "echo 'post-install: licenses';",
                "install -d '/app/share/licenses/imagemagick'; install -p -m 0644 'LICENSE' '/app/share/licenses/imagemagick/';",
                "install -d '/app/share/licenses/imagemagick/Magick++'; install -p -m 0644 'www/Magick++/COPYING' '/app/share/licenses/imagemagick/Magick++/';"
            ]
        },
        {
            "name": "wxGTK2",
            "no-autogen": true,
            "sources": [
                {
                    "type": "archive",
                    "url": "http://downloads.sf.net/wxwindows/wxGTK-2.8.12.tar.bz2",
                    "sha256": "f4193c29fb0e790c9a5c8936f082377a7e51c76bccafe41f4f9da7ca15c0ef1a"
                },
                {
                    "type": "file",
                    "path": "wx-config",
                    "sha256": "9002d9b69d0ff9a1b67cae59fc61783a1fd16a6f2213bc79af60ff1ee364ed1c"
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'fix wx-config';",
                        "sed -r -i 's!lib64!lib!g;s!/usr/!/app/!g' 'wx-config';"
                    ]
                },
                {
                    "type": "patch",
                    "path": "wxGTK-2.8.12-test.patch",
                    "strip-components": 1,
                    "sha256": "217ed70bacd95b3be51d462155d87cecf27a789fca9fd7a9334f4a4f586e6b02"
                },
                {
                    "type": "patch",
                    "path": "wxGTK-2.8.12-abicheck.patch",
                    "strip-components": 1,
                    "sha256": "46a1bb97d69163547da13d5e23a4c73e68de27ee601da5d2fb5bc5c417931453"
                },
                {
                    "type": "patch",
                    "path": "wxGTK-2.8.12-char.patch",
                    "strip-components": 1,
                    "sha256": "5025cf8a73405106c8c55c819a92006088da53ed0256e8e41b4c58cd93d354be"
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'fix permissions for sources';",
                        "chmod a-x include/wx/{msgout.h,dcgraph.h,graphics.h} src/common/msgout.cpp;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'configure';",
                        "export GDK_USE_XFT='1';
                        export optflags='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic';
                        export CFLAGS=\"${optflags} -fno-strict-aliasing \";
                        export CXXFLAGS=\"${optflags} -fno-strict-aliasing \";
                        configure_args=( );
                        #configure_args+=( '--with-opengl' );
                        configure_args+=( '--with-sdl' );
                        configure_args+=( '--without-gnomeprint' );
                        configure_args+=( '--enable-shared' );
                        configure_args+=( '--enable-soname' );
                        configure_args+=( '--disable-optimise' );
                        configure_args+=( '--enable-debug_info' );
                        configure_args+=( '--enable-intl' );
                        configure_args+=( '--enable-unicode' );
                        configure_args+=( '--enable-no_deps' );
                        configure_args+=( '--disable-rpath' );
                        configure_args+=( '--enable-geometry' );
                        configure_args+=( '--enable-graphics_ctx' );
                        configure_args+=( '--enable-sound' );
                        configure_args+=( '--enable-mediactrl' );
                        configure_args+=( '--enable-display' );
                        configure_args+=( '--enable-timer' );
                        configure_args+=( '--enable-compat24' );
                        configure_args+=( '--disable-catch_segvs' );
                        configure_args+=( '--with-gtk=2' );
                        configure_args+=( '--with-libpng' );
                        configure_args+=( '--with-libjpeg' );
                        configure_args+=( '--with-libtiff' );
                        configure_args+=( '--with-libxpm' );
                        configure_args+=( '--with-zlib' );
                        configure_args+=( '--with-expat' );
                        configure_args+=( '--with-libiconv-prefix=/usr' );
                        configure_args+=( '--enable-mediactrl' );
                        configure_args+=( '--enable-grid' );
                        configure_args+=( '--prefix=/app' );
                        configure_args+=( '--exec-prefix=/app' );
                        echo 'configure: wxGTK2';
                        for i in \"${configure_args[@]}\"; do
                            echo \"- '${i}'\";
                        done;
                        ./configure \"${configure_args[@]}\";"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'make';",
                        "make -j$(nproc);",
                        "make -j$(nproc) -C 'contrib/src/stc';",
                        "make -j$(nproc) -C 'contrib/src/ogl';",
                        "make -j$(nproc) -C 'contrib/src/gizmos';",
                        "make -j$(nproc) -C 'contrib/src/svg';",
                        "make -j$(nproc) -C 'locale' 'allmo';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'make install';",
                        "make install;",
                        "make install -C 'contrib/src/stc';",
                        "make install -C 'contrib/src/ogl';",
                        "make install -C 'contrib/src/gizmos';",
                        "make install -C 'contrib/src/svg';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'install';",
                        "echo 'install: begin';
                        # install our multilib-aware wrapper
                        #rm '/app/bin/wx-config';
                        mv '/app/bin/wx-config' '/app/bin/wx-config-2.0';
                        #install -p -m 755 'wx-config' '/app/bin/wx-config-2.0';
                        touch '/app/bin/wx-config';
                        # Alternatives setup with wxrc
                        mv '/app/bin/wxrc' '/app/bin/wxrc-2';
                        touch '/app/bin/wxrc';
                        echo 'install: end';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'install docs';",
                        "install -d '/app/share/doc/wxGTK2';
                        install -p -m 0644 'docs/readme.txt' 'docs/readme_vms.txt' '/app/share/doc/wxGTK2/';
                        install -p -m 0644 'docs/changes.txt' 'docs/todo.txt' '/app/share/doc/wxGTK2/';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'install licenses';",
                        "install -d '/app/share/licenses/wxGTK2';
                        install -p -m 0644 'docs/gpl.txt' 'docs/lgpl.txt' '/app/share/licenses/wxGTK2/';
                        install -p -m 0644 'docs/licence.txt' 'docs/licendoc.txt' 'docs/preamble.txt' '/app/share/licenses/wxGTK2/';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'backup old autotools files';",
                        "for filename in 'autogen' 'autogen.sh' 'configure' 'configure.ac' 'configure.in' 'install-sh' 'Makefile' 'Makefile.am' 'Makefile.in'; do
                            [[ -f \"${filename}\" ]] || continue;
                            mv \"${filename}\" \"${filename}.bak\";
                        done;",
                        "echo 'create empty Makefile';",
                        "echo '# Empty Makefile\n\nall:\n\techo \"Using an empty Makefile doing nothing\"\n\ninstall:\n\techo \"Using an empty Makefile doing nothing\"' > 'Makefile';"
                    ]
                }
            ],
            "post-install": [
                "echo 'post-install';",
                "echo 'post-install: begin';
                echo 'update-alternatives';
                # remove symlink
                if [[ -f '/app/bin/wx-config' ]] && [[ ! -h '/app/bin/wx-config' ]] ; then
                    rm '/app/bin/wx-config';
                fi;
                if [[ -f '/app/bin/wxrc' ]] && [[ ! -h '/app/bin/wxrc' ]] ; then
                    rm '/app/bin/wxrc';
                fi;
                use_symlink='0';
                command -v 'update-alternatives' || use_symlink='1';
                if [[ \"${use_symlink}\" -ne 0 ]]; then
                    ln -sf 'wx-config-2.0' '/app/bin/wx-config';
                    ln -sf 'wxrc-2' '/app/bin/wxrc';
                else
                    update-alternatives --install '/app/bin/wx-config' 'wx-config' '/app/bin/wx-config-2.0' 2;
                    update-alternatives --install '/app/bin/wxrc' 'wxrc' '/app/bin/wxrc-2' 2;
                fi
                echo 'post-install: end';"
            ]
        },
        {
            "name": "xaralx",
            "no-autogen": true,
            "sources": [
                {
                    "type": "archive",
                    "url": "http://archive.ubuntu.com/ubuntu/pool/multiverse/x/xaralx/xaralx_0.7r1785.orig.tar.gz",
                    "sha256": "ab2620253b0f7ae83f27e9ac4314b71fa78367e6fe442fdcd37fb6a61da53972"
                },
                {
                    "type": "file",
                    "path": "XARFormatDocument.pdf",
                    "sha256": "7eb68037eb9ea971c111e75258d6e9d84c28cdc1ec54b70a810ec9f1d684b7ea"
                },
                {
                    "type": "file",
                    "path": "xaralx.desktop",
                    "sha256": "5eee3f2607ad5c625a054eaa4d8dcd871f48715a893e0ebafb6cc8063bec8e91"
                },
                {
                    "type": "file",
                    "path": "XaraLX-i18n-0.7r1785.tar.gz",
                    "sha256": "d38dbc1335e3048705f1bc9e2e2acaa3ab64a5ea8e4ee49f235ab633dbbe2108"
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'extract PO files';",
                        "pushd 'po'; tar -xf '../XaraLX-i18n-0.7r1785.tar.gz'; popd;"
                    ]
                },
                {
                    "type": "file",
                    "path": "xaralx.svg",
                    "sha256": "726f494805133f938577207290f30700f97ac07e60b90793bc87f6ffa2ce7cbc"
                },
                {
                    "type": "file",
                    "path": "xaralx.appdata.xml",
                    "sha256": "5ba8e6e538336fa3e0d94f825445fae89d90f1b517d6e1817f36e0129aeafd62"
                },
                {
                    "type": "patch",
                    "path": "abuild.diff",
                    "strip-components": 1,
                    "sha256": "d7c1f0a9331f9c42a9cb35ac86a0742649ff944748acf31ed57fa603d9aac30b"
                },
                {
                    "type": "patch",
                    "path": "XaraLX-0.7r1785-missing-declaration.patch",
                    "strip-components": 1,
                    "sha256": "0d36a53e75cd83a7b318cf399e2d6c0d721c1d6c3452a19acf164ac59391f712"
                },
                {
                    "type": "patch",
                    "path": "xaralx-0.7_p1785-pragma-gentoo.patch",
                    "strip-components": 1,
                    "sha256": "281450a2f81d45807e01d5cec98eebfcb8795d8a43ad8e1412ebac5f0a425a2e"
                },
                {
                    "type": "patch",
                    "path": "xaralx-gsocket.patch",
                    "strip-components": 1,
                    "sha256": "4e8b85eae30ce5404481bc12704037c87d4f5d5ffea0e336abe185616a369a4e"
                },
                {
                    "type": "patch",
                    "path": "xaralx-0.7_p1785-libpng15-gentoo.patch",
                    "strip-components": 1,
                    "sha256": "bc243121b905225587f2e6a916ca8d0e141bdca1433c1c43f5a3b81917e9a049"
                },
                {
                    "type": "patch",
                    "path": "30_gtk_wxwidgets_symbol_clash-deb.patch",
                    "strip-components": 1,
                    "sha256": "3f7ef5304c47fe87ab48ba3cc00d3c9c41e85b3c7736939aaa235d5b136c89e5"
                },
                {
                    "type": "patch",
                    "path": "50_update_imagemagick_version_parser-deb.patch",
                    "strip-components": 1,
                    "sha256": "279123b48c5c9e106f630cbf907036c69ddee0c42a5812984ec4640a1fd634da"
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'pre-patch: Makefile.am';",
                        "stat -c '%Y' 'Makefile.am' > 'Makefile.am.stamp';"
                    ]
                },
                {
                    "type": "patch",
                    "path": "add-linker-flags-deb-mga-el.patch",
                    "strip-components": 1,
                    "sha256": "46dd27c6161425580781fe73199b5266c2df10b136e5a7e9c60486423ae9a96c"
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'patch: Makefile.am';",
                        "sed -r -i 's/^(XaraLX_LDFLAGS.*)$/\\1 \\-no\\-pie /' 'Makefile.am';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'post-patch: Makefile.am';",
                        "date_orig_makefile=\"$( cat 'Makefile.am.stamp' | head -n 1 )\"; touch -d \"@${date_orig_makefile}\" 'Makefile.am';"
                    ]
                },
                {
                    "type": "patch",
                    "path": "wxOil-wxHandleFatalError.patch",
                    "strip-components": 0,
                    "sha256": "e2fcf1b095e092f1618f2040ee8fbd6b2f4edc231fb90e779d8e3bb822b74e4f"
                },
                {
                    "type": "patch",
                    "path": "xaralx-pragma.patch",
                    "strip-components": 0,
                    "sha256": "d74e01d4e3a79918b99ad9ad652aaee8eef3a5b8331f5159ee78936b287f0ad1"
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'prepare: remove .svn';",
                        "find . -type d -name '.svn' -prune -exec rm -rf {} +;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'prepare: fix *.po files';",
                        "sed -i 's|msgstr \"800 на 600 drawing.xar\"|msgstr \"\"|g' 'po/ru.po';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'fix configure: xml2';",
                        "find * -xtype f \\( -name 'configure' -o -name 'configure.in' -o -name 'output.0' -o -name 'output.1' \\) | sort -V | while read -r filename; do
                            sed -r -i 's/^([[:blank:]]*XML2CONFIG=)(xml2-config)([[:blank:]]*)$/\\1\"pkg-config libxml-2.0\"\\3/' \"${filename}\";
                            sed -r -i 's/([[:blank:]]*|^)(test \"\\$xml2version\" -lt )([0-9]+)([^0-9]|$)/\\1\\20\\4/g' \"${filename}\";
                        done;",
                        "grep -HERi 'XML2CONFIG=' * || :;",
                        "grep -HERi '\"\\$xml2version\"' * || :;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'autogen and autoreconf';",
                        "cp -p /usr/share/automake-*/config.{sub,guess} .;",
                        "./autogen.sh",
                        "pushd 'filters/SVGFilter'; autoreconf -f -i; popd;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'configure';",
                        "export WXCONFIG='wx-config';
                        export WXCONFIG_PATH=\"$( command -v \"${WXCONFIG}\" )\";
                        export optflags='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic';
                        export CFLAGS=\"${optflags} -fno-strict-aliasing \";
                        export CXXFLAGS=\"${optflags} -fno-strict-aliasing -fpermissive \";
                        export LDFLAGS=\"${LDFLAGS} -lgobject-2.0 \";
                        configure_args=( );
                        configure_args+=( '--enable-unicode' );
                        configure_args+=( '--enable-xarlib' );
                        configure_args+=( '--enable-filters' );
                        #configure_args+=( '--disable-svnversion' );
                        configure_args+=( \"--with-wx-config=${WXCONFIG_PATH}\" );
                        configure_args+=( '--prefix=/app' );
                        configure_args+=( '--exec-prefix=/app' );
                        echo 'configure: XaraLX';
                        for i in \"${configure_args[@]}\"; do
                            echo \"- '${i}'\";
                        done;
                        ./configure \"${configure_args[@]}\";"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'fix configure';",
                        "hardening_flags=( );
                        hardening_flags+=( '-fPIE' );
                        hardening_flags+=( '-pie' );
                        for text in \"${hardening_flags[@]}\"; do
                            text_cleared=\"$( sed -re 's/^[[:blank:]]*//;s/[[:blank:]]*$//' <<< \"${text}\" )\";
                            [[ -n \"${text_cleared}\" ]] || continue
                            sed -re 's/[[:blank:]]+/\\n/g' <<< \"${text_cleared}\" | grep -Ei 'pie' | while read -r subtext_cleared ; do
                                sed_cmd=\"s#([[:blank:]]+|^)(${subtext_cleared})([[:blank:]]+|$)#\\1\\3#g\";
                                find * -xtype f \\( -name 'Makefile' -o -name 'config.log' -o -name 'config.status' \\) | xargs -I{} sed -r -i \"${sed_cmd}\" '{}';
                            done;
                        done;
                        grep -HERi '\-fPIE|\-pie' * || :;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'make';",
                        "make -j$(nproc);"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'compile locales';",
                        "pushd 'po';
                            for f in *.po; do
                                t=\"${f#xaralx-}\";
                                msgfmt -v -o \"${t%.po}.mo\" \"${f}\";
                            done;
                        popd;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'create icons';",
                        "app_name='xaralx';
                        #imagemagick_home='/app/opt/imagemagick';
                        #imagemagick_lib=\"${imagemagick_home}/lib\";
                        #imagemagick_bin=\"${imagemagick_home}/bin\";
                        #if [[ -n \"${LD_LIBRARY_PATH}\" ]]; then
                        #    LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${imagemagick_lib}\";
                        #else
                        #    LD_LIBRARY_PATH=\"${imagemagick_lib}\";
                        #fi;
                        #export LD_LIBRARY_PATH;
                        #if [[ -n \"${PATH}\" ]]; then
                        #    PATH=\"${PATH}:${imagemagick_bin}\";
                        #else
                        #    PATH=\"${imagemagick_bin}\";
                        #fi;
                        #export PATH;
                        icon='xaralx.svg';
                        for s in {16,22,24,32,48,64,72,96,128,192,256,512}; do
                            size=\"${s}x${s}\";
                            echo \"- ${size}\";
                            mkdir -p \"icons/${size}/\";
                            convert -background none -density 1024 -resize \"${size}\" \"${icon}\" \"icons/${size}/${app_name}.png\";
                        done;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'make install';",
                        "install -d '/app/bin';",
                        "make install;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'install';",
                        "echo 'install: begin';
                        dos2unix_home='/app/opt/dos2unix';
                        dos2unix_bin=\"${dos2unix_home}/bin\";
                        if [[ -n \"${PATH}\" ]]; then
                            PATH=\"${PATH}:${dos2unix_bin}\";
                        else
                            PATH=\"${dos2unix_bin}\";
                        fi;
                        export PATH;
                        ( cd '/app/bin' && ln -s 'XaraLX' xara && ln -s 'XaraLX' 'xaralx'; )
                        ( cd '/app/share' && ln -s 'xaralx' 'XaraLX'; )
                        # /usr/share/xaralx/doc/xaralx/ is used by the application for online help
                        ( cd '/app/share/xaralx' && ln -s '/share/doc/xaralx/help' 'doc'; )
                        install -D -m 644 'doc/en/LICENSE' '/app/share/doc/xaralx/help/LICENSE';
                        install -m 644 'XARFormatDocument.pdf' '/app/share/doc/xaralx';
                        cp -a 'Designs' 'TextDesigns' 'Templates' 'filters/SVGFilter'/{tests,images,openclipart,samples} 'testfiles' '/app/share/xaralx';
                        cat 'doc/en/xaralxHelp.tar.gz' | ( cd '/app/share/doc/xaralx/help' ; tar zxvf -; )
                        find '/app/share/doc' -type f -print0 | xargs -0 dos2unix -q -o;
                        find '/app/share' '/app/share/doc' -type f -print0 | xargs -0 chmod 644;
                        perl -ape 's{((src|document.location\\s+)=.?\")}{$1help/}g;' < '/app/share/doc/xaralx/help/xaralx.htm' > '/app/share/doc/xaralx/help.html';
                        install -m 644 'COPYING' 'LICENSE' 'README' 'MTRand.txt' 'doc/gifutil.txt' 'doc/XSVG.txt' '/app/share/doc/xaralx/';
                        install -D -m 644 'doc/xaralx.1' '/app/share/man/man1/xaralx.1';
                        ( cd '/app/share/man/man1' && ln -s 'xaralx.1' 'XaraLX.1' && ln -s 'xaralx.1' 'xara.1'; )
                        install -D -m 644 'xaralx.png' '/app/share/pixmaps/xaralx.png';
                        install -D -m 644 'xaralx.desktop' '/app/share/applications/xaralx.desktop';
                        chmod 755 '/app/share/xaralx/tests/makerandom.sh';
                        install -p -D -m 0644 'xaralx.appdata.xml' '/app/share/metainfo/xaralx.appdata.xml';
                        echo 'install: end';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'install docs';",
                        "install -d '/app/share/doc/xaralx';
                        install -p -m 0644 'ABOUT-NLS' 'INSTALL' '/app/share/doc/xaralx/';
                        install -p -m 0644 'Pragmas.txt' '/app/share/doc/xaralx/';
                        install -p -m 0644 'ChangeLog' 'Doxyfile' 'NEWS' 'portnotes' '/app/share/doc/xaralx/';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'install licenses';",
                        "install -d '/app/share/licenses/xaralx';
                        install -p -m 0644 'COPYING' 'LICENSE' 'GPL' '/app/share/licenses/xaralx/';
                        install -p -m 0644 'libs/LIBS-LICENSE' '/app/share/licenses/xaralx/';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'install icons';",
                        "find 'icons' -mindepth 2 -maxdepth 2 -type f -name 'xaralx.png' | sort -V | xargs -I{} dirname '{}' | xargs -I{} basename '{}' | while read -r size ; do
                            install -p -D -m 0644 \"icons/${size}/xaralx.png\" \"/app/share/icons/hicolor/${size}/apps/xaralx.png\";
                        done;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'install locales';",
                        "pushd 'po';
                            for f in *.mo; do
                                install -pD -m644 \"${f}\" \"/app/share/locale/${f%.mo}/LC_MESSAGES/XaraLX.mo\";
                            done;
                        popd;"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'edit desktop file';",
                        "app_name='xaralx';
                        app_id='org.xaraxtreme.XaraLX';
                        desktop-file-edit --set-key='Icon' --set-value=\"${app_name}\" '/app/share/applications/xaralx.desktop';
                        desktop-file-edit --set-key='FilePattern' --set-value=\"${app_name}\" '/app/share/applications/xaralx.desktop';
                        desktop-file-edit --set-key='TryExec' --set-value=\"${app_name}\" '/app/share/applications/xaralx.desktop';"
                    ]
                },
                {
                    "type": "shell",
                    "commands": [
                        "echo 'backup old autotools files';",
                        "for filename in 'autogen' 'autogen.sh' 'configure' 'configure.ac' 'configure.in' 'install-sh' 'Makefile' 'Makefile.am' 'Makefile.in'; do
                            [[ -f \"${filename}\" ]] || continue;
                            mv \"${filename}\" \"${filename}.bak\";
                        done;",
                        "echo 'create empty Makefile';",
                        "echo '# Empty Makefile\n\nall:\n\techo \"Using an empty Makefile doing nothing\"\n\ninstall:\n\techo \"Using an empty Makefile doing nothing\"' > 'Makefile';"
                    ]
                }
            ],
            "post-install": [
                "echo 'post-install: metainfo';",
                "if [[ ! -d '/app/share/metainfo' ]]; then
                    [[ -d '/app/share/appdata' ]] || exit 1;
                    mv '/app/share/appdata' '/app/share/metainfo';
                fi;",
                "echo 'setting up xmlstarlet';
                xmlstarlet_home='/app/opt/xmlstarlet';
                xmlstarlet_bin=\"${xmlstarlet_home}/bin\";
                if [[ -n \"${PATH}\" ]]; then
                    PATH=\"${PATH}:${xmlstarlet_bin}\";
                else
                    PATH=\"${xmlstarlet_bin}\";
                fi;
                export PATH;
                app_id='org.xaraxtreme.XaraLX';
                echo \"app_id: ${app_id}\";
                app_ver=\"$( grep -Ei '^[[:blank:]]*VERSION[[:blank:]]*=[[:blank:]]*([^[:blank:]]*)*[[:blank:]]*$' 'configure.bak' 2>/dev/null | tail -n 1 2>/dev/null | sed -re 's/^[[:blank:]]*VERSION[[:blank:]]*=[[:blank:]]*([^[:blank:]]*)*[[:blank:]]*$/\\1/' 2>/dev/null || :; )\";
                echo \"app_ver: ${app_ver}\";
                app_rev=\"$( grep -E 'DECLARE_SOURCE\\(\"\\$Revision: [0-9]+ \\$\"\\);' 'Kernel/snapops.cpp' 2>/dev/null | grep -Eo '[0-9]+' 2>/dev/null | head -n 1 2>/dev/null || :; )\";
                echo \"app_rev: ${app_rev}\";
                app_version='';
                if [[ -n \"${app_ver}\" ]]; then
                    app_version=\"${app_ver}\";
                    if [[ -n \"${app_rev}\" ]]; then
                        app_version+=\"r${app_rev}\";
                    fi;
                fi;
                echo \"app_version: ${app_version}\";
                app_date=\"$( date --reference 'ChangeLog' -u '+%Y-%m-%d' 2>/dev/null || :; )\";
                echo \"app_date: ${app_date}\";
                find '/app/share/metainfo' -mindepth 1 -maxdepth 1 -xtype f -name '*.appdata.xml' | sort -V | while read -r filename; do
                    if [[ -n \"${app_version}\" && -n \"${app_date}\" ]]; then
                        need_fix='0';
                        xmlstarlet sel -t -v '/component/releases/release/@version' \"${filename}\" || need_fix='1';
                        if [[ \"${need_fix}\" -ne \"0\" ]]; then
                            echo 'updating release info';
                            xmlstarlet ed --inplace -d '/component/releases' -s '/component' -t elem -n 'releases' -s '/component/releases' -t elem -n 'release' -s '/component/releases/release' -t attr -n 'version' -v \"${app_version}\" -s '/component/releases/release' -t attr -n 'date' -v \"${app_date}\" \"${filename}\";
                            xmlstarlet sel -t -c '/component/releases/release' \"${filename}\" | sed -re 's/$/\\n/' || :;
                        fi
                    fi;
                    if [[ -n \"${app_id}\" ]]; then
                        id=\"$( xmlstarlet sel -t -v '/component/id' \"${filename}\" 2>/dev/null | head -n 1 2>/dev/null || :; )\";
                        if [[ \"${id}\" != \"${app_id}.desktop\" ]]; then
                            xmlstarlet ed --inplace -d '/component/id' -s '/component' -t elem -n 'id' -v \"${app_id}.desktop\" \"${filename}\";
                        fi;
                        need_fix='0';
                        xmlstarlet sel -t -v '/component/launchable' \"${filename}\" || need_fix='2';
                        if [[ \"${need_fix}\" -ne \"0\" ]]; then
                            echo 'adding additional tags: launchable';
                            xmlstarlet ed --inplace -d '/component/launchable' -s '/component' -t elem -n 'launchable' -v \"${app_id}.desktop\" -s '/component/launchable' -t attr -n 'type' -v 'desktop-id' \"${filename}\";
                            xmlstarlet sel -t -c '/component/launchable' \"${filename}\" | sed -re 's/$/\\n/' || :;
                        fi;
                    fi;
                done;",
                "echo 'post-install: validate data';",
                "cat /app/share/applications/*.desktop;",
                "desktop-file-validate /app/share/applications/*.desktop || :;",
                "cat /app/share/metainfo/*.appdata.xml;",
                "appstream-util validate-relax --nonet /app/share/metainfo/*.appdata.xml || :;"
            ]
        }
    ],
    "cleanup": [
        "/include",
        "/share/cmake",
        "/lib/systemd",
        "/opt",
        "*.la",
        "*.a"
    ]
}
