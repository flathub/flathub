diff --git a/source/build/src/vfs.cpp b/source/build/src/vfs.cpp
index 44a9d212d..a97900721 100644
--- a/source/build/src/vfs.cpp
+++ b/source/build/src/vfs.cpp
@@ -331,8 +331,12 @@ int32_t findfrompath(const char *fn, char **where)
 
     char *pfn = (char *)Xmalloc(allocsiz);
 
-    strcpy(pfn, "./");
+    if (!std::string(fn).starts_with(std::getenv("XDG_DATA_HOME")))
+        strcpy(pfn, "./");
+    else
+        strcpy(pfn, "/");
     strcat(pfn, ffn);
+
     if (buildvfs_exists(pfn))
     {
         *where = pfn;
@@ -1237,7 +1241,11 @@ BUILDVFS_FIND_REC *klistpath(const char *_path, const char *mask, int32_t type)
             if (d==CUR_DIR && (type & BUILDVFS_FIND_NOCURDIR))
                 goto next;
 
-            strcpy(buf, d);
+            if (!std::string(_path).starts_with(std::getenv("XDG_DATA_HOME"))) {
+                strcpy(buf, d);
+            } else {
+                strcpy(buf, "/");
+            }
             if (!pathsearchmode)
             {
                 // Fix for "autoload" dir in multi-user environments - NY00123
diff --git a/source/duke3d/src/player.cpp b/source/duke3d/src/player.cpp
index 48b78cb4f..0ff6ed694 100644
--- a/source/duke3d/src/player.cpp
+++ b/source/duke3d/src/player.cpp
@@ -5943,7 +5943,8 @@ int portableBackupSave(const char * path, const char * name, int volume, int lev
     if (!FURY)
         return 0;
 
-    char fn[BMAX_PATH];
+    char fn[BMAX_PATH] = { *const_cast<char*>(redirect_to_user_data(path).c_str()) };
+    printf("portableBackupSave %s\n", fn);
 
     if (G_ModDirSnprintf(fn, sizeof(fn), "%s.ext", path))
     {
diff --git a/source/duke3d/src/savegame.cpp b/source/duke3d/src/savegame.cpp
index ce29653e5..200b409f3 100644
--- a/source/duke3d/src/savegame.cpp
+++ b/source/duke3d/src/savegame.cpp
@@ -149,10 +149,12 @@ static void ReadSaveGameHeaders_CACHE1D(BUILDVFS_FIND_REC *f)
 
     for (; f != nullptr; f = f->next)
     {
-        char const * fn = f->name;
+        std::string fullpath = (std::filesystem::path(redirect_to_user_data("saves")) / f->name).lexically_normal().string();
+        char const * fn = fullpath.c_str();
         buildvfs_kfd fil = kopen4loadfrommod(fn, 0);
-        if (fil == buildvfs_kfd_invalid)
+        if (fil == buildvfs_kfd_invalid) {
             continue;
+        }
 
         menusave_t & msv = g_internalsaves[g_numinternalsaves];
 
@@ -209,9 +211,9 @@ static int countcache1dfind(BUILDVFS_FIND_REC *f)
 
 static void ReadSaveGameHeaders_Internal(void)
 {
-    static char const DefaultPath[] = "/", SavePattern[] = "*.esv";
-
-    BUILDVFS_FIND_REC *findfiles_default = klistpath(DefaultPath, SavePattern, BUILDVFS_FIND_FILE);
+    static char const SavePattern[] = "*.esv";
+    std::string DefaultPath(redirect_to_user_data("saves/"));
+    BUILDVFS_FIND_REC *findfiles_default = klistpath(DefaultPath.c_str(), SavePattern, BUILDVFS_FIND_FILE);
 
     // potentially overallocating but programmatically simple
     int const numfiles = countcache1dfind(findfiles_default);
@@ -325,13 +327,13 @@ int32_t G_LoadSaveHeaderNew(char const *fn, savehead_t *saveh)
 
 #if 0
         // debug code to dump the screenshot
-        char scrbuf[BMAX_PATH];
-        if (G_ModDirSnprintf(scrbuf, sizeof(scrbuf), "%s.raw", fn) == 0)
-        {
-            buildvfs_FILE scrfil = buildvfs_fopen_write(scrbuf);
-            buildvfs_fwrite((char *)waloff[TILE_LOADSHOT], 320, 200, scrfil);
-            buildvfs_fclose(scrfil);
-        }
+        char scrbuf[BMAX_PATH] = { get_writable_filename(fn).c_str() };
+        // if (G_ModDirSnprintf(scrbuf, sizeof(scrbuf), "%s.raw", fn) == 0)
+        // {
+        buildvfs_FILE scrfil = buildvfs_fopen_write(scrbuf);
+        buildvfs_fwrite((char *)waloff[TILE_LOADSHOT], 320, 200, scrfil);
+        buildvfs_fclose(scrfil);
+        // }
 #endif
     }
     else
@@ -784,11 +786,11 @@ void G_DeleteSave(savebrief_t const & sv)
 
     char temp[BMAX_PATH];
 
-    if (G_ModDirSnprintf(temp, sizeof(temp), "%s", sv.path))
-    {
-        LOG_F(ERROR, "Unable to remove %s: unknown fatal error.", sv.path);
-        return;
-    }
+    // if (G_ModDirSnprintf(temp, sizeof(temp), "%s", sv.path))
+    // {
+    //     LOG_F(ERROR, "Unable to remove %s: unknown fatal error.", sv.path);
+    //     return;
+    // }
 
     buildvfs_unlink(temp);
     Bstrcat(temp, ".ext");
@@ -833,40 +835,40 @@ int32_t G_SavePlayer(savebrief_t & sv, bool isAutoSave)
     Net_WaitForServer();
     ready2send = 0;
 
-    char fn[BMAX_PATH];
+    char fn[BMAX_PATH] = "save";
 
     errno = 0;
     buildvfs_FILE fil;
+    std::string savefilename;
 
     if (sv.isValid())
     {
-        if (G_ModDirSnprintf(fn, sizeof(fn), "%s", sv.path))
-        {
-            LOG_F(ERROR, "Unable to save %s: unknown fatal error.", sv.path);
-            goto saveproblem;
-        }
-        fil = buildvfs_fopen_write(fn);
+        // if (G_ModDirSnprintf(fn, sizeof(fn), "%s", sv.path))
+        // {
+        //     LOG_F(ERROR, "Unable to save %s: unknown fatal error.", sv.path);
+        //     goto saveproblem;
+        // }
+        savefilename = get_writable_filename_subdir(sv.path, "saves");
+        fil = buildvfs_fopen_write(savefilename.c_str());
     }
     else
     {
-        static char const SaveName[] = "save0000.esv";
-        int const len = G_ModDirSnprintfLite(fn, ARRAY_SIZE(fn), SaveName);
-        if (len >= ARRAY_SSIZE(fn)-1)
-        {
-            LOG_F(ERROR, "Resulting save filename is too long.");
-            goto saveproblem;
-        }
-        char * zeros = fn + (len-8);
-        fil = savecounter.opennextfile(fn, zeros);
-        savecounter.count++;
+        // int const len = G_ModDirSnprintf(fn, ARRAY_SIZE(fn), SaveName);
+        // if (len >= ARRAY_SSIZE(fn)-1)
+        // {
+        //     LOG_F(ERROR, "Resulting save filename is too long.");
+        //     goto saveproblem;
+        // }
+
+        savefilename = get_numbered_writable_filename(get_writable_filename_subdir(fn, "saves"), ".esv");
+        fil = buildvfs_fopen_write(savefilename.c_str());
         // don't copy the mod dir into sv.path
-        Bstrcpy(sv.path, fn + (len-(ARRAY_SIZE(SaveName)-1)));
+        Bstrcpy(sv.path, fn + 4);
     }
 
     if (!fil)
     {
-        LOG_F(ERROR, "Unable to open %s for writing: %s.",
-                   fn, strerror(errno));
+        LOG_F(ERROR, "Unable to open %s for writing: %s.", savefilename.c_str(), strerror(errno));
         goto saveproblem;
     }
 
@@ -891,7 +893,7 @@ int32_t G_SavePlayer(savebrief_t & sv, bool isAutoSave)
 
     if (!g_netServer && ud.multimode < 2)
     {
-        OSD_Printf("Saved: %s\n", fn);
+        OSD_Printf("Saved: %s\n", savefilename.c_str());
 #ifndef AMC_BUILD
         Bstrcpy(apStrings[QUOTE_RESERVED4], "Game Saved");
         P_DoQuote(QUOTE_RESERVED4, g_player[myconnectindex].ps);
