diff --git a/TurtleArt/turtleblocks.py b/TurtleArt/turtleblocks.py
index 14054ace..f15f1bae 100755
--- a/TurtleArt/turtleblocks.py
+++ b/TurtleArt/turtleblocks.py
@@ -139,22 +139,29 @@ class TurtleMain():
     def _get_local_settings(self, activity_root):
         """ return an activity-specific Gio.Settings
         """
-        # create schemas directory if missing
-        path = os.path.join(get_path(None, 'data'), 'schemas')
-        if not os.access(path, os.F_OK):
-            os.makedirs(path)
-
-        # create compiled schema file if missing
-        compiled = os.path.join(path, 'gschemas.compiled')
+        # create compiled schema file if missing from activity root
+        compiled = os.path.join(activity_root, 'gschemas.compiled')
         if not os.access(compiled, os.R_OK):
-            src = '%s.gschema.xml' % self._GIO_SETTINGS
-            lines = open(os.path.join(activity_root, src), 'r').readlines()
-            open(os.path.join(path, src), 'w').writelines(lines)
-            os.system('glib-compile-schemas %s' % path)
-            os.remove(os.path.join(path, src))
+            # create schemas directory if missing
+            path = os.path.join(get_path(None, 'data'), 'schemas')
+            if not os.access(path, os.F_OK):
+                os.makedirs(path)
+
+            # create compiled schema file if missing
+            compiled = os.path.join(path, 'gschemas.compiled')
+            if not os.access(compiled, os.R_OK):
+                src = '%s.gschema.xml' % self._GIO_SETTINGS
+                lines = open(os.path.join(activity_root, src), 'r').readlines()
+                open(os.path.join(path, src), 'w').writelines(lines)
+                os.system('glib-compile-schemas %s' % path)
+                os.remove(os.path.join(path, src))
+
+            schemas_path = path
+        else:
+            schemas_path = activity_root
 
         # create a local Gio.Settings based on the compiled schema
-        source = Gio.SettingsSchemaSource.new_from_directory(path, None, True)
+        source = Gio.SettingsSchemaSource.new_from_directory(schemas_path, None, True)
         schema = source.lookup(self._GIO_SETTINGS, True)
         _settings = Gio.Settings.new_full(schema, None, None)
         return _settings
