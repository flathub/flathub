diff --git a/Quelea/build.gradle b/Quelea/build.gradle
index 537fb2e6..9d104dc3 100644
--- a/Quelea/build.gradle
+++ b/Quelea/build.gradle
@@ -1,7 +1,5 @@
 buildscript {
     dependencies {
-        classpath 'edu.sc.seis.launch4j:launch4j:3.0.5'
-        classpath 'com.bmuschko:gradle-izpack-plugin:3.2'
         classpath "com.github.ben-manes:gradle-versions-plugin:0.39.0"
     }
 }
@@ -10,9 +8,7 @@ plugins {
     id 'application'
     id 'java'
     id 'org.openjfx.javafxplugin' version '0.0.10'
-    id 'edu.sc.seis.launch4j' version '3.0.5'
     id 'com.github.ben-manes.versions' version '0.39.0'
-    id 'com.bmuschko.izpack' version '3.0'
 }
 
 configurations.all {
@@ -81,43 +77,6 @@ compileJava.finalizedBy(dependencyUpdates)
 [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
 ext.mainClass = 'org.quelea.windows.main.MainStub'
 
-task createQueleaExe64(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) { //Launch4j
-    mainClassName = 'org.quelea.windows.main.MainStub'
-    mutexName = "queleamutex"
-    supportUrl = "https://quelea.discourse.group/"
-    icon = "../../icons/logo.ico"
-    copyright = "GPLv3"
-    bundledJrePath = "winjre64"
-    jvmOptions = ["-Dfile.encoding=UTF-8","-Dprism.dirtyopts=false","--add-opens java.base/java.nio=ALL-UNNAMED","-Dglass.accessible.force=false","--add-exports=javafx.graphics/com.sun.javafx.css=ALL-UNNAMED","--add-exports=javafx.base/com.sun.javafx.runtime=ALL-UNNAMED","--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED","--add-opens java.base/java.lang=ALL-UNNAMED","--add-opens javafx.controls/javafx.scene.control=ALL-UNNAMED"]
-    outfile = "Quelea64.exe"
-}
-
-task downloadGStreamer {
-    def f = new File('gs.msi')
-    if (!f.exists()) {
-        new URL('https://gstreamer.freedesktop.org/data/pkg/windows/1.22.8/msvc/gstreamer-1.0-msvc-x86_64-1.22.8.msi').withInputStream{ i -> f.withOutputStream{ it << i }}
-    }
-}
-
-task downloadJres {
-    def mf = new File('macjre.zip')
-    if (!mf.exists()) {
-        new URL('https://cdn.azul.com/zulu/bin/zulu21.32.17-ca-fx-jdk21.0.2-macosx_x64.zip').withInputStream{ i -> mf.withOutputStream{ it << i }}
-    }
-
-    def wf = new File('winjre64.zip')
-    if (!wf.exists()) {
-        new URL('https://cdn.azul.com/zulu/bin/zulu21.32.17-ca-fx-jdk21.0.2-win_x64.zip').withInputStream{ i -> wf.withOutputStream{ it << i }}
-    }
-
-    doLast {
-        ant.move file: "macjre.zip",
-                todir: "bundlejre"
-        ant.move file: "winjre64.zip",
-                todir: "bundlejre"
-    }
-}
-
 task copyToDist {
     doLast {
         copy {from configurations.runtimeClasspath into project.distdir + "/lib"} //libraries
@@ -133,8 +92,6 @@ task copyToDist {
         copy {from "img" into project.distdir + "/img"}
         copy {from "timer" into project.distdir + "/timer"}
         copy {from "src" into project.distdir + "/src"}
-        copy {from zipTree("bundlejre/winjre64.zip") into project.distdir}
-        file("dist/zulu21.32.17-ca-fx-jdk21.0.2-win_x64").renameTo(file("dist/winjre64"))
         copy {from file("build/libs/Quelea.jar") into file(project.distdir)}
         copy {from file("README.TXT") into file(project.distdir)}
         copy {from file("quelea.properties") into file(project.distdir)}
@@ -152,70 +109,16 @@ task copyToDist {
     }
 }
 
-task grabNative {
-    doLast {
-        copy {
-            from file(project.file('osx/libAVPlayerJava.jnilib'))
-            into project.file(project.distdir + '/lib/')
-        }
-    }
-}
-copyToDist.finalizedBy(grabNative)
-
-izPackCreateInstaller {
-    installFile = file("izpack/config.xml")
-    outputFile = file(CPInstaller)
-    baseDir = file("dist")
-}
-
-task innosetup (type:Exec) {
-    doFirst {
-        workingDir = project.file('.')
-        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
-            commandLine = ['cmd', '/C', 'build-install.bat', project.queleaversion]
-        } else {
-            commandLine = ['sh', './build-install.sh', project.queleaversion]
-        }
-    }
-
-    doLast {
-        copy {from file("Output/setup.exe") into file(project.distdir + "/standalone") rename { String filename -> return WindowsInstallerName}}
-        copy {from file("Output/setup64.exe") into file(project.distdir + "/standalone") rename { String filename -> return WindowsInstaller64Name}}
-        delete (file("Output"))
-    }
-}
-
 task labelcheck(type:JavaExec) {
     mainClass = 'org.quelea.services.languages.LabelChecker'
     classpath = sourceSets.main.runtimeClasspath
 }
 
-task runPackr(type: JavaExec) {
-    classpath = files('packr.jar')
-    mainClass = "com.badlogicgames.packr.Packr"
-    args = ["packr.json"]
-}
-
-task zipMacPackr(type: Zip) {
-    archiveFileName = MacInstallerName
-    destinationDirectory = file("dist/standalone")
-
-    from "out-mac"
-
-    doLast {
-        delete (file("out-mac"))
-    }
-}
-
-runPackr.finalizedBy(zipMacPackr);
-
 task dist(type: GradleBuild) {
-    tasks = ['labelcheck', 'downloadJres', 'downloadGStreamer', 'createQueleaExe64', 'copyToDist', 'runPackr', 'izpack', 'innosetup', 'releaseSummary']
+    tasks = ['labelcheck', 'copyToDist']
 }
 
 dependencies {
-    izpack 'org.codehaus.izpack:izpack-ant:5.1.3'
-
     implementation 'com.googlecode.paradoxdriver:paradoxdriver:1.5.0'
     implementation 'com.github.berry120.jopenlyrics:jopenlyrics:2.0'
     implementation group: 'org.hsqldb', name: 'hsqldb', version: '2.6.0'
@@ -271,13 +174,6 @@ dependencies {
 
     implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.32'
 
-    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:win"
-    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:linux"
-    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:mac"
-    runtimeOnly "org.openjfx:javafx-web:$javafx.version:win"
-    runtimeOnly "org.openjfx:javafx-web:$javafx.version:linux"
-    runtimeOnly "org.openjfx:javafx-web:$javafx.version:mac"
-
     testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
     testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'
 }
@@ -295,7 +191,3 @@ task releaseSummary(type:JavaExec) {
     mainClass = 'org.quelea.services.utils.ReleaseSummaryGenerator'
     classpath = sourceSets.main.runtimeClasspath
 }
-
-tasks.named("izPackCreateInstaller") {
-    dependsOn(tasks.named("zipMacPackr"))
-}
\ No newline at end of file
