From 6bcf7589d2a32c168b1f868d9d3643ba249d9abf Mon Sep 17 00:00:00 2001
From: CarVac <c.lo.to.da.down.lo@gmail.com>
Date: Sat, 26 Dec 2020 10:36:30 -0500
Subject: [PATCH] make SSE ifdefs in matrix header

---
 filmulator-gui/core/matrix.hpp | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/filmulator-gui/core/matrix.hpp b/filmulator-gui/core/matrix.hpp
index 86b2561..c8749e7 100644
--- a/filmulator-gui/core/matrix.hpp
+++ b/filmulator-gui/core/matrix.hpp
@@ -21,7 +21,9 @@
 #include <limits>
 #include <algorithm>
 #include "math.h"
+#ifdef __SSE2__
 #include <emmintrin.h>
+#endif
 #include <iostream>
 #include <memory>
 #include <omp.h>
@@ -45,6 +47,7 @@ class matrix
         int num_rows;
         int num_cols;
         inline void slow_transpose_to(const matrix<T> &target) const;
+#ifdef __SSE2__
         inline void fast_transpose_to(const matrix<T> &target) const;
         inline void transpose4x4_SSE(float *A, float *B, const int lda,
                                      const int ldb) const;
@@ -52,6 +55,7 @@ class matrix
                                            const int m, const int lda,
                                            const int ldb,
                                            const int block_size) const;
+#endif
         inline void transpose_scalar_block(float *A, float *B, const int lda,
                                      const int ldb, const int block_size) const;
         inline void transpose_block(float *A, float *B, const int n,
@@ -494,6 +498,7 @@ inline void matrix<T>::slow_transpose_to (const matrix<T> &target) const
                 data[row*num_cols + col];
 }
 
+#ifdef __SSE2__
 template<>
 inline void matrix<float>::fast_transpose_to (const matrix<float> &target) const
 {
@@ -509,6 +514,7 @@ inline void matrix<T>::fast_transpose_to (const matrix<T> &target) const
 {
     slow_transpose_to(target);
 }
+#endif
 
 template <class T>
 inline void matrix<T>::transpose_to (const matrix<T> &target) const
@@ -519,13 +525,18 @@ inline void matrix<T>::transpose_to (const matrix<T> &target) const
 template<>
 inline void matrix<float>::transpose_to (const matrix<float> &target) const
 {
+#ifdef __SSE2__
     //Fast transpose only work with matricies with dimensions of multiples of 16
     if((num_rows%16 != 0) || (num_cols%16 !=0))
+#endif
         slow_transpose_to(target);
+#ifdef __SSE2__
     else
         fast_transpose_to(target);
+#endif
 }
 
+#ifdef __SSE2__
 template<class T>
 inline void matrix<T>::transpose4x4_SSE(float *A, float *B, const int lda,
                                         const int ldb) const
@@ -559,6 +570,7 @@ inline void matrix<T>::transpose_block_SSE4x4(float *A, float *B, const int n,
                 
         }
 }
+#endif
 
 template<class T>
 inline void matrix<T>::transpose_scalar_block(float *A, float *B, const int lda, const int ldb, const int block_size) const {
