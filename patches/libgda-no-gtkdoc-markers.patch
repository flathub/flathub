Index: libgda-6.0.0/libgda/gda-connection-model.vala
===================================================================
--- libgda-6.0.0.orig/libgda/gda-connection-model.vala
+++ libgda-6.0.0/libgda/gda-connection-model.vala
@@ -16,7 +16,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-/**
+/*
  * An interface to be implemented by database providers
  */
 public interface Gda.ConnectionModel : GLib.Object {
@@ -40,7 +40,7 @@ public interface Gda.ConnectionModel : G
   public abstract Gda.CreateTableBuilder? builder_create_table (string name, string? schema = null);
   public abstract Gda.DropTableBuilder? builder_drop_table (string name, string? schema = null);
 }
-/**
+/*
  * A class to hold and parse connection string
  */
 public class Gda.ConnectionModelParams : GLib.Object {
@@ -48,7 +48,7 @@ public class Gda.ConnectionModelParams :
   public string pasword { get; set; }
   public string cnc_string { get; set; }
 }
-/**
+/*
  * An interface to be represent any query to be executed by
  * providers
  */
@@ -60,34 +60,34 @@ public interface Gda.Query : GLib.Object
   public abstract async void cancel ();
 }
 
-/**
+/*
  * Represent any result after execute a query
  */
 public interface Gda.Result : GLib.Object {}
 
-/**
+/*
  * Represent a table in a database.
  */
 public interface Gda.TableModel : GLib.Object, Gda.MetaTable {}
-/**
+/*
  * a Table allowing to change its value
  */
 public interface Gda.ReadonlyTableModel : GLib.Object, Gda.TableModel
 {
-  /**
+  /*
    * Get the value at give row and column number
    */
   public abstract GLib.Value get_value (int row, string column);
-  /**
+  /*
    * Get the value at give row and column number
    */
   public abstract GLib.Value get_value_at (int row, int column);
-  /**
+  /*
    * Model to iterate or access to {link Gda.RowModel} objects
    */
   public abstract GLib.ListModel rows { get; }
 }
-/**
+/*
  * A table as a result of a {@link Query} execution
  */
 public interface Gda.ResultTable : GLib.Object,
@@ -96,28 +96,28 @@ public interface Gda.ResultTable : GLib.
                                   Gda.ReadonlyTableModel,
                                   Gda.Result
 {}
-/**
+/*
  * a Table allowing to change its value
  */
 public interface Gda.WritableTableModel : GLib.Object, Gda.TableModel, Gda.ReadonlyTableModel {
-  /**
+  /*
    * Get the value at give row and column number
    */
   public abstract void set_value (int row, string column, GLib.Value value);
-  /**
+  /*
    * Get the value at give row and column number
    */
   public abstract void set_value_at (int row, int column, GLib.Value value);
-  /**
+  /*
    * Creates a new {@link Gda.RowModel} to be used by {@link insert_row}
    */
   public abstract RowModel create_row ();
-  /**
+  /*
    * Insert a {@link Gda.RowModel} into the table model.
    */
   public abstract void insert_row (RowModel new_row);
 }
-/**
+/*
  * Is a result from a query inserting rows, with the
  * number of rows and last row inserted
  */
@@ -126,13 +126,13 @@ public interface Gda.Inserted : GLib.Obj
   public abstract Gda.RowModel last_insertd { get; }
 }
 
-/**
+/*
  * Is a result from a query with a number of afected rows
  */
 public interface Gda.AfectedRows : GLib.Object, Gda.Result {
   public abstract int number { get; }
 }
-/**
+/*
  * Represent a row in a table model.
  */
 public interface Gda.RowModel : GLib.Object, GLib.ListModel {
@@ -140,7 +140,7 @@ public interface Gda.RowModel : GLib.Obj
   public abstract Gda.ColumnModel get_column (string name);
 }
 
-/**
+/*
  * Represent a column in a row of a table model
  */
 public interface Gda.ColumnModel : GLib.Object {
@@ -151,7 +151,7 @@ public interface Gda.ColumnModel : GLib.
   public abstract ColumnAttributes attributes { get; set; }
   public abstract ForeignKey? foreign_key { get; set; }
 }
-/**
+/*
  * Attributes for Columns
  */
 [Flags]
@@ -226,7 +226,7 @@ public enum Gda.ColumnAttributes {
 	  return NONE;
   }
 }
-/**
+/*
  * Foreign Key description for a Column
  */
 public interface Gda.ForeignKey : GLib.Object {
@@ -395,7 +395,7 @@ public interface Gda.ForeignKey : GLib.O
   }
 }
 
-/**
+/*
  * A reference to a column in a referenced table
  */
 public interface Gda.ReferencedColumn : GLib.Object
@@ -404,7 +404,7 @@ public interface Gda.ReferencedColumn :
   public abstract string name { get; }
 }
 
-/**
+/*
  * Represented a prepared query. Values required by
  * query can be set by using paramenters property.
  */
@@ -412,14 +412,14 @@ public interface Gda.PreparedQuery : GLi
   public abstract string name { get; }
   public abstract Gda.Parameters parameters { get; }
 }
-/**
+/*
  * Set parameters for a prepared query.
  */
 public interface Gda.Parameters : GLib.Object, GLib.ListModel {
   public abstract void set_value (string name, GLib.Value val);
   public abstract GLib.Value? get_value (string name);
 }
-/**
+/*
  * A catalog of meta data for a connection.
  */
 public interface Gda.MetaCatalog : GLib.Object {
@@ -427,7 +427,7 @@ public interface Gda.MetaCatalog : GLib.
   public abstract GLib.ListModel get_tables ();
   public abstract GLib.ListModel get_views ();
 }
-/**
+/*
  * Meta data describing a table.
  */
 public interface Gda.MetaTable : GLib.Object {
@@ -437,36 +437,36 @@ public interface Gda.MetaTable : GLib.Ob
   public abstract GLib.ListModel columns { get; }
   public abstract Gda.MetaColumn get_colum (string name);
 }
-/**
+/*
  * Meta data describing a column.
  */
 public interface Gda.MetaColumn : GLib.Object {
-  /**
+  /*
    * Column's name
    */
   public abstract string name { get; set; }
-  /**
+  /*
    * A {@link GLib.Type} with the traslated colum's type
    */
   public abstract GLib.Type column_type { get; }
-  /**
+  /*
    * Specific data type name from the connection server
    */
   public abstract string column_type_name { get; }
 }
-/**
+/*
  *
  */
 public interface Gda.QueryBuilder : GLib.Object {
-  /**
+  /*
    * Builder's SQL representation
    */
   public abstract string sql { get; set; }
-  /**
+  /*
    * Builder's name
    */
   public abstract string name { get; set; }
-  /**
+  /*
    * Connection specific parameters required
    */
   public abstract Gda.Parameters parameters { get; }
@@ -482,57 +482,57 @@ public interface Gda.QueryBuilder : GLib
   public abstract Gda.PreparedQuery? prepare_string (string name, string sql) throws GLib.Error;
   public abstract Gda.PreparedQuery? get_prepared_query (string name);
 }
-/**
+/*
  * Create Data Base Builder
  */
 public interface Gda.CreateDatabaseBuilder : GLib.Object, QueryBuilder {
   public abstract string database_name { get; set; }
 }
-/**
+/*
  * Drop Base Builder
  */
 public interface Gda.DropDatabaseBuilder : GLib.Object, QueryBuilder {
   public abstract string database_name { get; set; }
 }
-/**
+/*
  * Create Table Builder
  */
 public interface Gda.CreateTableBuilder : GLib.Object, QueryBuilder {
-  /**
+  /*
    * Table's name to create
    */
   public abstract string table_name { get; set; }
-  /**
+  /*
    * List of columns to add
    */
   public abstract GLib.ListModel columns { get; set; }
-  /**
+  /*
    * List of constraints to add to the table
    */
   public abstract GLib.ListModel contraints { get; set; }
 }
-/**
+/*
  * Represent a constraint for a table
  */
 public interface Gda.TableConstraint {
-  /**
+  /*
    * Table this constraint apply to
    */
   public abstract TableModel table { get; }
-  /**
+  /*
    * String representation of the constraint.
    */
   public abstract string definition { get; set; }
 }
-/**
+/*
  * Create Table Builder
  */
 public interface Gda.DropTableBuilder : GLib.Object, QueryBuilder {
-  /**
+  /*
    * Table's name to drop
    */
   public abstract string table_name { get; set; }
-  /**
+  /*
    * Constrols if all dependencies will be dropped in cascade
    */
   public abstract bool cascade { get; set; }
Index: libgda-6.0.0/libgda/Gda-6.0-custom.vala
===================================================================
--- libgda-6.0.0.orig/libgda/Gda-6.0-custom.vala
+++ libgda-6.0.0/libgda/Gda-6.0-custom.vala
@@ -89,10 +89,5 @@ namespace Gda {
 		public abstract void* _gda_reserved3 ();
 		public abstract void* _gda_reserved4 ();
 	}
-	[CCode (cheader_filename = "libgda.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gda_sql_statement_get_type ()")]
-	[Compact]
-	public class SqlStatement {
-		public static Gda.SqlStatementContentsInfo get_contents_infos (Gda.SqlStatementType type);
-	}
 
 }
