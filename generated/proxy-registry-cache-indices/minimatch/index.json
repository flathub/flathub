{
  "_id": "minimatch",
  "_rev": "284-5c4daff5c10412457c10e43cb183b285",
  "name": "minimatch",
  "dist-tags": {
    "v3-legacy": "3.1.2",
    "v3.0-legacy": "3.0.8",
    "legacy-v5": "5.1.6",
    "legacy-v4": "4.2.3",
    "legacy-v7": "7.4.6",
    "latest": "10.0.1"
  },
  "versions": {
    "3.1.2": {
      "name": "minimatch",
      "version": "3.1.2",
      "license": "ISC",
      "_id": "minimatch@3.1.2",
      "bugs": {
        "url": "https://github.com/isaacs/minimatch/issues"
      },
      "dist": {
        "shasum": "19cd194bfd3e428f049a70817c038d89ab4be35b",
        "tarball": "http://localhost:3000/minimatch/-/minimatch-3.1.2.tgz",
        "fileCount": 4,
        "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
        "signatures": [
          {
            "sig": "MEUCIQCjRUIUS0JXXl/vaCoh294tvrp6lut12ZaWVv4bh7mmWAIgDLzDZgvoXeXzGPeAuSItCyQASG/Nnk+X7NCGfbFFR9M=",
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"
          }
        ],
        "unpackedSize": 34902,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiDA3rCRA9TVsSAnZWagAAiV8P/iCEUNUKlBcB1VfJNYRv\noTlTsav1Jmjk2+W5Asvl+fMwzWDOf4irHs1SS8vArxogUEvM6UBeCZedmtcE\n8y/XYYf1f4rMIODe906e30Xv4bcfDqQOMhKrxQSI7d7LqUS2EHnk9tYL2ROL\nxiqzxL0a2Ujpc34YD9hqV9WyhHJaq5IprVqi01Vg0NggZvVYj59BsvadIGDE\nb5HYaQVPpmhLy1ykt7dAXUmRFWco1uCfwmMhyX8204ZjJS7keRwkuhHqAVp/\nSfWyXaQzKoEQNWVuWf7wp+u8DWctHAAza69bdzIMDZoa0wOukve5eScDw2ud\nXvs/3kHPy5Li862zjU/kQdZW3WmN3AM0vId8pvWEzt6uaMxYOB+ce+ZR/2c6\n0pWfwwxg65qn6FYUx7mU3aHjharqHNUoPuPUJCAdmjsSRwNUl9hvFhbWr1W9\nCXQBpo+dZd8Iw8nVLmFMVmAJrDOb/1aQcEHmiriYIcSY7wLY+XZuxtZwxnvm\nuYDEFCuSmASf4M7f+RY/okzxwsGk7gD5PL5bKb+kANYctCrke6wDLzDNCxJJ\nnQR37/YjSJUxExmJETSuAkRR0brKi9qeKMMX6tw+0ZkdixRElncpETz3MkrL\ng3F78+eu8oZcSIr4s9CwE6wlXnMl3zQgyYaVyeXnZ9OC4aQ+vWU05n8mQgH7\n6u+o\r\n=0kEM\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "main": "minimatch.js",
      "readme": "# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://travis-ci.org/isaacs/minimatch.svg?branch=master)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require(\"minimatch\")\n\nminimatch(\"bar.foo\", \"*.foo\") // true!\nminimatch(\"bar.foo\", \"*.bar\") // false!\nminimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* \"Globstar\" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n## Minimatch Class\n\nCreate a minimatch object by instantiating the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require(\"minimatch\").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn't have any \"magic\" in it\n    (that is, it's something like `\"foo\"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `\"\"`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, \"*.js\", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true}))\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable \"extglob\" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself if this option is set.  When not set, an empty list\nis returned if there are no matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n\n### partial\n\nCompare a partial path to a pattern.  As long as the parts of the path that\nare present are not contradicted by the pattern, it will be treated as a\nmatch.  This is useful in applications where you're walking through a\nfolder structure, and don't yet have the full path, but want to ensure that\nyou do not walk down paths that can never be a match.\n\nFor example,\n\n```js\nminimatch('/a/b', '/a/*/c/d', { partial: true })  // true, might be /a/b/c/d\nminimatch('/a/b', '/**/d', { partial: true })     // true, might be /a/b/.../d\nminimatch('/x/y/z', '/a/**/z', { partial: true }) // false, because x !== a\n```\n\n### allowWindowsEscape\n\nWindows path separator `\\` is by default converted to `/`, which\nprohibits the usage of `\\` as a escape character. This flag skips that\nbehavior and allows using the escape character.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than\n`\"*a?\"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n",
      "engines": {
        "node": "*"
      },
      "gitHead": "699c459443a6bd98f5b28197978f76e7f71467ac",
      "scripts": {
        "test": "tap",
        "preversion": "npm test",
        "postpublish": "git push origin --all; git push origin --tags",
        "postversion": "npm publish"
      },
      "_npmVersion": "8.4.1",
      "directories": {},
      "_nodeVersion": "17.4.0",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "publishConfig": {
        "tag": "v3-legacy"
      },
      "_hasShrinkwrap": false,
      "readmeFilename": "README.md",
      "devDependencies": {
        "tap": "^15.1.6"
      }
    },
    "5.1.6": {
      "name": "minimatch",
      "version": "5.1.6",
      "license": "ISC",
      "_id": "minimatch@5.1.6",
      "bugs": {
        "url": "https://github.com/isaacs/minimatch/issues"
      },
      "dist": {
        "shasum": "1cfcb8cf5522ea69952cd2af95ae09477f122a96",
        "tarball": "http://localhost:3000/minimatch/-/minimatch-5.1.6.tgz",
        "fileCount": 5,
        "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
        "signatures": [
          {
            "sig": "MEYCIQDiMjtuM8wCBI1A20eMmJjguXdJs9emsSfkyNrP9HfX9gIhAJiQHdN0U5+b5hYdykGXicc/CoiJu7mYZLpfjuHt3xel",
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"
          }
        ],
        "unpackedSize": 38919,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjxvsdACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqlgQ/9ELWjZ+57ildeZ1IQyYJ/WYaaGCjqth+pGej5n40f/2GrBNH5\r\nEl3IbiTHuihdfb2NsxzZySieGNor7vFSL4sZEah6h3atWMvbkKYdYTEhpopi\r\nREkRpqOMcbLfrhYOwplT51iNaOutqLm7enUF53OrAf6/VgiQE6dBChJc3KDn\r\nXDtsdQiKUY9IpEpZR47VB8HSupYrH2e4p+fQKbwF2k9xuFGmWdf16V6sGFNh\r\nBqNTSYVzjSoQWF+k+9P3qlJEuAlmj3OmC/lsBrvpvmwMn6bH3dCTltt4REwo\r\nqlROVwV3gYXzPv/8FOOJK8jEWG49SxgGvgzNxu+WxGT7fJL3YyzYIQZpNzzR\r\nwFwO/zRCW4fLK52RrJ8fNelXavCcssrB7TmoqT2e0Yk3BIGkUNdSBEnFQItJ\r\nBBtA+T06Rp2u9XSUj6IObvU9tAz4s2qSSmXNv7//otXn2Cg1NESAz7lIxBA4\r\nm175qE3D1hLqobf65uXAngwVuleD896/m7ncclPQf6HRbWf9k7fA5WgRQIMT\r\nRZsJpTrxqHadZuvFItWe9hscXDuwbXZVahV3wwTgUmfXFS4hh2Eq/UK/0NTY\r\npHvQcJi024PAq+LLgI89J9k7i+TIT8YI1Vk33+hUODBAmXUSiVSSyzRyzX1h\r\n+7SmY0CxASDdlYg4YmNaInkbqQ4M40MkBG8=\r\n=Z9Zl\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "main": "minimatch.js",
      "readme": "# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://travis-ci.org/isaacs/minimatch.svg?branch=master)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require(\"minimatch\")\n\nminimatch(\"bar.foo\", \"*.foo\") // true!\nminimatch(\"bar.foo\", \"*.bar\") // false!\nminimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* \"Globstar\" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes in patterns\nwill always be interpreted as escape characters, not path separators.\n\nNote that `\\` or `/` _will_ be interpreted as path separators in paths on\nWindows, and will match against `/` in glob expressions.\n\nSo just always use `/` in patterns.\n\n## Minimatch Class\n\nCreate a minimatch object by instantiating the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require(\"minimatch\").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn't have any \"magic\" in it\n    (that is, it's something like `\"foo\"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `\"\"`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, \"*.js\", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true})\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable \"extglob\" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself if this option is set.  When not set, an empty list\nis returned if there are no matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n\n### partial\n\nCompare a partial path to a pattern.  As long as the parts of the path that\nare present are not contradicted by the pattern, it will be treated as a\nmatch.  This is useful in applications where you're walking through a\nfolder structure, and don't yet have the full path, but want to ensure that\nyou do not walk down paths that can never be a match.\n\nFor example,\n\n```js\nminimatch('/a/b', '/a/*/c/d', { partial: true })  // true, might be /a/b/c/d\nminimatch('/a/b', '/**/d', { partial: true })     // true, might be /a/b/.../d\nminimatch('/x/y/z', '/a/**/z', { partial: true }) // false, because x !== a\n```\n\n### windowsPathsNoEscape\n\nUse `\\\\` as a path separator _only_, and _never_ as an escape\ncharacter.  If set, all `\\\\` characters are replaced with `/` in\nthe pattern.  Note that this makes it **impossible** to match\nagainst paths containing literal glob pattern characters, but\nallows matching with patterns constructed using `path.join()` and\n`path.resolve()` on Windows platforms, mimicking the (buggy!)\nbehavior of earlier versions on Windows.  Please use with\ncaution, and be mindful of [the caveat about Windows\npaths](#windows).\n\nFor legacy reasons, this is also set if\n`options.allowWindowsEscape` is set to the exact value `false`.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than\n`\"*a?\"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\nNote that `fnmatch(3)` in libc is an extremely naive string comparison\nmatcher, which does not do anything special for slashes.  This library is\ndesigned to be used in glob searching and file walkers, and so it does do\nspecial things with `/`.  Thus, `foo*` will not match `foo/bar` in this\nlibrary, even though it would in `fnmatch(3)`.\n",
      "engines": {
        "node": ">=10"
      },
      "gitHead": "3e216b9cf09528b8cbb90c5ecc01d054326d8f85",
      "scripts": {
        "snap": "tap",
        "test": "tap",
        "preversion": "npm test",
        "postversion": "npm publish",
        "prepublishOnly": "git push origin --follow-tags"
      },
      "_npmVersion": "9.3.0",
      "directories": {},
      "_nodeVersion": "19.4.0",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "publishConfig": {
        "tag": "legacy-v5"
      },
      "_hasShrinkwrap": false,
      "readmeFilename": "README.md",
      "devDependencies": {
        "tap": "^16.3.2"
      }
    },
    "9.0.4": {
      "name": "minimatch",
      "version": "9.0.4",
      "license": "ISC",
      "_id": "minimatch@9.0.4",
      "bugs": {
        "url": "https://github.com/isaacs/minimatch/issues"
      },
      "dist": {
        "shasum": "8e49c731d1749cbec05050ee5145147b32496a51",
        "tarball": "http://localhost:3000/minimatch/-/minimatch-9.0.4.tgz",
        "fileCount": 53,
        "integrity": "sha512-KqWh+VchfxcMNRAJjj2tnsSJdNbHsVgnkBhTNrW7AjVo6OvLtxw8zfT9oLw1JSohlFzJ8jCoTgaoXvJ+kHt6fw==",
        "signatures": [
          {
            "sig": "MEQCIEHx6wDga4HI7ZIwQJ5815qkSydqrccn45jiUWd+XGywAiAlO83AcJHK9yJ7o2ApIF8drPKD2Ln00MXM9eb/4zSfEQ==",
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"
          }
        ],
        "unpackedSize": 434900
      },
      "main": "./dist/commonjs/index.js",
      "tshy": {
        "exports": {
          ".": "./src/index.ts",
          "./package.json": "./package.json"
        }
      },
      "type": "module",
      "types": "./dist/commonjs/index.d.ts",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./dist/esm/index.d.ts",
            "default": "./dist/esm/index.js"
          },
          "require": {
            "types": "./dist/commonjs/index.d.ts",
            "default": "./dist/commonjs/index.js"
          }
        },
        "./package.json": "./package.json"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "gitHead": "cb4be48a55d64b3a40a745d4a8eb4d1b06507277",
      "scripts": {
        "snap": "tap",
        "test": "tap",
        "format": "prettier --write . --loglevel warn",
        "prepare": "tshy",
        "presnap": "npm run prepare",
        "pretest": "npm run prepare",
        "typedoc": "typedoc --tsconfig tsconfig-esm.json ./src/*.ts",
        "benchmark": "node benchmark/index.js",
        "preversion": "npm test",
        "postversion": "npm publish",
        "prepublishOnly": "git push origin --follow-tags"
      },
      "prettier": {
        "semi": false,
        "useTabs": false,
        "tabWidth": 2,
        "endOfLine": "lf",
        "printWidth": 80,
        "arrowParens": "avoid",
        "singleQuote": true,
        "jsxSingleQuote": false,
        "bracketSameLine": true
      },
      "_npmVersion": "10.5.0",
      "directories": {},
      "_nodeVersion": "20.11.0",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "_hasShrinkwrap": false,
      "devDependencies": {
        "tap": "^18.7.2",
        "tshy": "^1.12.0",
        "mkdirp": "1",
        "ts-node": "^10.9.1",
        "typedoc": "^0.23.21",
        "prettier": "^2.8.2",
        "@types/tap": "^15.0.8",
        "typescript": "^4.9.3",
        "@types/node": "^18.15.11",
        "@types/brace-expansion": "^1.1.0",
        "eslint-config-prettier": "^8.6.0"
      }
    }
  },
  "time": {
    "created": "2011-07-16T08:52:46.242Z",
    "modified": "2024-07-08T23:02:25.713Z",
    "3.1.2": "2022-02-15T20:32:43.510Z",
    "5.1.6": "2023-01-17T19:46:37.483Z",
    "9.0.4": "2024-03-28T19:42:56.374Z"
  },
  "license": "ISC"
}