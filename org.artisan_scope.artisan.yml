id: org.artisan_scope.artisan
runtime: org.kde.Platform
sdk: org.kde.Sdk
runtime-version: '6.7'

base: com.riverbankcomputing.PyQt.BaseApp
base-version: '6.7'
cleanup-commands:
  # omit static libraries
  - find /app/lib -name \*.a | xargs rm -f
  # remove build dependencies
  - python3 -m pip uninstall -y pythran pyinstaller pyinstaller-hooks-contrib \
      pyproject_hooks pyproject_metadata pycparser meson_python expandvars cppy pybind11
  # remove Python test suites
  - find /app/lib/python* -type d -name tests | xargs rm -Rf
  # Yoctupuce includes compiled libraries *sigh*, only keep the ones we may need
  - |
    python3 <<EOF
    from os import listdir, remove
    from os.path import basename, dirname, join
    from yoctopuce.yocto_api import YAPI
    YAPI.yloadYapiCDLL()
    dir = dirname(YAPI._yApiCLibFile)
    keep = [basename(f) for f in [YAPI._yApiCLibFile, YAPI._yApiCLibFileFallback]]
    [remove(join(dir, f)) for f in listdir(dir) if f not in keep]
    EOF
  # cleanup QtWebEngine dictionaries, which we don't need and use quite some space
  - find /app/share/locale -name \*.bdic | xargs rm -f
  - rm -Rf /app/qtwebengine_dictionaries
  # we need no QtWebEngine developer tools, nor automation driver
  - rm -f /app/resources/qtwebengine_devtools_resources.pak
  - rm -Rf /app/libexec/webenginedriver
  # cleanup base
  - /app/cleanup-BaseApp.sh

command: /app/artisan.py
separate-locales: false
finish-args:
  # Qt
  - --share=ipc
  - --socket=fallback-x11
  - --socket=wayland
  - --device=dri
  # USB
  - --device=all

modules:
  - ./dep-openblas.yml
  - ./dep-qhull.yml
  - ./shared-modules/libusb/libusb.json
  - ./dep-python3-artisan.json

  - name: artisan
    buildsystem: simple
    build-commands:
      # install without application bundle with dependencies
      - sed -i 's/^\s*\(pyinstaller\|rm -rf dist\)/#\1/' src/build-linux.sh
      - mkdir -p src/dist/artisan && touch src/dist/artisan/__dummy__
      - cd src && PATH=/var/data/python/bin:$PATH ./build-linux.sh
      - rm -f $FLATPAK_DEST/__dummy__
      # copy all gathered files to the destination
      - mkdir $FLATPAK_DEST/includes
      - cp -Rp src/dist/* $FLATPAK_DEST/includes
      # and also the Python files
      - cp -Rp src/{artisan.py,artisanlib,plus,proto,help,uic,misc} $FLATPAK_DEST
      - chmod a+x $FLATPAK_DEST/artisan.py
      # workaround for strange recursion error
      - sed -i 's/^\(\s*import os\s*\)$/\1\nimport snap7/' $FLATPAK_DEST/artisan.py
      # then compile all Python files
      - python3 -m compileall $FLATPAK_DEST/{artisanlib,plus,proto,help,uic,misc}
    sources:
      - type: archive
        dest-filename: artisan.tar.gz
        url: https://api.github.com/repos/artisan-roaster-scope/artisan/tarball/v2.10.4
        sha256: 34fb8957fba570f6cdd036c3bec84057c86828a723abfaf74373e011f80b6815
        x-checker-data:
          type: json
          url: https://api.github.com/repos/artisan-roaster-scope/artisan/releases/latest
          version-query: .tag_name | sub("^v"; "")
          url-query: .tarball_url

