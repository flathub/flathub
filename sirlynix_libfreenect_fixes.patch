From c92a53c791cf5f3ea875fc19c6ec4c206adc2342 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Leclercq?= <lynix680@gmail.com>
Date: Wed, 29 Dec 2021 11:44:19 +0100
Subject: [PATCH 1/3] Add freenect_map_depth_to_rgb

---
 include/libfreenect_registration.h |  4 ++++
 src/registration.c                 | 11 +++++++++++
 2 files changed, 15 insertions(+)

diff --git a/include/libfreenect_registration.h b/include/libfreenect_registration.h
index a17a343..3492f89 100644
--- a/include/libfreenect_registration.h
+++ b/include/libfreenect_registration.h
@@ -125,6 +125,10 @@ FREENECTAPI void freenect_camera_to_world(freenect_device* dev,
 FREENECTAPI void freenect_map_rgb_to_depth( freenect_device* dev,
 	uint16_t* depth_mm, uint8_t* rgb_raw, uint8_t* rgb_registered );
 
+// helper function to map one FREENECT_VIDEO_DEPTH_MM image to RGB space (performing FREENECT_DEPTH_REGISTERED)
+FREENECTAPI void freenect_map_depth_to_rgb( freenect_device* dev,
+	uint8_t* unpacked_depth, uint16_t* output_mm );
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/registration.c b/src/registration.c
index cbbf557..f12a711 100644
--- a/src/registration.c
+++ b/src/registration.c
@@ -419,6 +419,17 @@ void freenect_map_rgb_to_depth(freenect_device* dev, uint16_t* depth_mm, uint8_t
 	free(map);
 }
 
+/// RGB -> depth mapping function (inverse of default FREENECT_DEPTH_REGISTERED mapping)
+void freenect_map_rgb_to_depth(freenect_device* dev, uint8_t* unpacked_depth, uint16_t* output_mm)
+{
+	freenect_registration* reg = &(dev->registration);
+
+	if (!reg->raw_to_mm_shift || !reg->depth_to_rgb_shift || !reg->registration_table)
+		freenect_init_registration(dev);
+
+	freenect_apply_registration(dev, unpacked_depth, output_mm, true);
+}
+
 /// Allocate and fill registration tables
 /// This function should be called every time a new video (not depth!) mode is
 /// activated.
-- 
2.39.0


From 5dba50070b3bac074ea1138ff1ea6e261c0fa0d4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Leclercq?= <lynix680@gmail.com>
Date: Wed, 29 Dec 2021 12:01:41 +0100
Subject: [PATCH 2/3] Fix oopsie

---
 src/registration.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/registration.c b/src/registration.c
index f12a711..5f5f4ec 100644
--- a/src/registration.c
+++ b/src/registration.c
@@ -420,7 +420,7 @@ void freenect_map_rgb_to_depth(freenect_device* dev, uint16_t* depth_mm, uint8_t
 }
 
 /// RGB -> depth mapping function (inverse of default FREENECT_DEPTH_REGISTERED mapping)
-void freenect_map_rgb_to_depth(freenect_device* dev, uint8_t* unpacked_depth, uint16_t* output_mm)
+void freenect_map_depth_to_rgb(freenect_device* dev, uint8_t* unpacked_depth, uint16_t* output_mm)
 {
 	freenect_registration* reg = &(dev->registration);
 
-- 
2.39.0


From 5e2cd8e18877fbe7ef4c863161e90873c06a9180 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Leclercq?= <lynix680@gmail.com>
Date: Wed, 29 Dec 2021 12:56:14 +0100
Subject: [PATCH 3/3] It looks like freenect_apply_registration doesn't like
 FREENECT_VIDEO_DEPTH_MM, switch to FREENECT_DEPTH_11BIT

---
 include/libfreenect.h              | 11 +++++++++++
 include/libfreenect_registration.h |  4 ++--
 src/cameras.c                      |  9 +++++++++
 src/registration.c                 |  2 +-
 4 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/include/libfreenect.h b/include/libfreenect.h
index f436715..bbf0a5b 100644
--- a/include/libfreenect.h
+++ b/include/libfreenect.h
@@ -708,6 +708,17 @@ FREENECTAPI void freenect_set_fw_address_nui(freenect_context * ctx, unsigned ch
  */
 FREENECTAPI void freenect_set_fw_address_k4w(freenect_context * ctx, unsigned char * fw_ptr, unsigned int num_bytes);
 
+/**
+ * Convert a packed array of n elements with vw useful bits into array of
+ * zero-padded 16bit elements.
+ *
+ * @param src The source packed array, of size (n * vw / 8) bytes
+ * @param dest The destination unpacked array, of size (n * 2) bytes
+ * @param vw The virtual width of elements, that is the number of useful bits for each of them
+ * @param n The number of elements (in particular, of the destination array), NOT a length in bytes
+ */
+
+FREENECTAPI void freenect_convert_packed_to_16bit(uint8_t *src, uint16_t *dest, int vw, int n);
 
 #ifdef __cplusplus
 }
diff --git a/include/libfreenect_registration.h b/include/libfreenect_registration.h
index 3492f89..a99aa60 100644
--- a/include/libfreenect_registration.h
+++ b/include/libfreenect_registration.h
@@ -125,9 +125,9 @@ FREENECTAPI void freenect_camera_to_world(freenect_device* dev,
 FREENECTAPI void freenect_map_rgb_to_depth( freenect_device* dev,
 	uint16_t* depth_mm, uint8_t* rgb_raw, uint8_t* rgb_registered );
 
-// helper function to map one FREENECT_VIDEO_DEPTH_MM image to RGB space (performing FREENECT_DEPTH_REGISTERED)
+// helper function to map one FREENECT_DEPTH_11BIT image to unpacked depth in RGB space (performing what FREENECT_DEPTH_REGISTERED does)
 FREENECTAPI void freenect_map_depth_to_rgb( freenect_device* dev,
-	uint8_t* unpacked_depth, uint16_t* output_mm );
+	uint8_t* packed_depth, uint16_t* output_mm );
 
 #ifdef __cplusplus
 }
diff --git a/src/cameras.c b/src/cameras.c
index a5d580a..6e9e886 100644
--- a/src/cameras.c
+++ b/src/cameras.c
@@ -374,6 +374,15 @@ static void convert_packed11_to_16bit(uint8_t *raw, uint16_t *frame, int n)
 	}
 }
 
+void freenect_convert_packed_to_16bit(uint8_t *src, uint16_t *dest, int vw, int n)
+{
+	if (vw == 11)
+		// fast-path
+		convert_packed11_to_16bit(src, dest, n);
+	else
+		convert_packed_to_8bit(src, dest, vw, n);
+}
+
 static void depth_process(freenect_device *dev, uint8_t *pkt, int len)
 {
 	freenect_context *ctx = dev->parent;
diff --git a/src/registration.c b/src/registration.c
index 5f5f4ec..7b27cdf 100644
--- a/src/registration.c
+++ b/src/registration.c
@@ -427,7 +427,7 @@ void freenect_map_depth_to_rgb(freenect_device* dev, uint8_t* unpacked_depth, ui
 	if (!reg->raw_to_mm_shift || !reg->depth_to_rgb_shift || !reg->registration_table)
 		freenect_init_registration(dev);
 
-	freenect_apply_registration(dev, unpacked_depth, output_mm, true);
+	freenect_apply_registration(dev, unpacked_depth, output_mm, false);
 }
 
 /// Allocate and fill registration tables
-- 
2.39.0

