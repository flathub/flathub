Metadata-Version: 2.1
Name: ffmpeg-progress-yield
Version: 0.12.0
Summary: Run an ffmpeg command with progress
Home-page: https://github.com/slhck/ffmpeg-progress-yield
Author: Werner Robitza
Author-email: werner.robitza@gmail.com
License: MIT
Keywords: ffmpeg
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE

# ffmpeg-progress-yield
<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-6-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->

[![PyPI version](https://img.shields.io/pypi/v/ffmpeg-progress-yield.svg)](https://pypi.org/project/ffmpeg-progress-yield) [![Python package](https://github.com/slhck/ffmpeg-progress-yield/actions/workflows/python-package.yml/badge.svg)](https://github.com/slhck/ffmpeg-progress-yield/actions/workflows/python-package.yml)

Run an ffmpeg command with its progress yielded.

![](ffmpeg-progress-yield.gif)

Contents:

- [Requirements](#requirements)
- [Installation](#installation)
- [Usage](#usage)
  - [As a library](#as-a-library)
  - [On the command line](#on-the-command-line)
- [Caveats](#caveats)
- [Contributors](#contributors)
- [License](#license)

-------------

## Requirements

-   Python 3.9 or higher
-   ffmpeg v3.1 or above from <http://ffmpeg.org/> installed in your \$PATH

## Installation

    pip3 install ffmpeg-progress-yield

Or download this repository, then run `pip install .`.

## Usage

### As a library

In your Python project, import the helper class and run `run_command_with_progress`.

For more information see the [API documentation](https://htmlpreview.github.io/?https://github.com/slhck/ffmpeg-progress-yield/blob/master/docs/ffmpeg_progress_yield.html).

Example:

```python
from ffmpeg_progress_yield import FfmpegProgress

cmd = [
    "ffmpeg", "-i", "test/test.mp4", "-c:v", "libx264", "-vf", "scale=1920x1080", "-preset", "fast", "-f", "null", "/dev/null",
]

ff = FfmpegProgress(cmd)
for progress in ff.run_command_with_progress():
    print(f"{progress}/100")
```

The command will yield the current progress in percent as a float number.

`run_command_with_progress` takes a `duration_override` argument where you can manually override the duration of the command in seconds. This is useful if your input doesn't have an implicit duration (e.g. if you use `testsrc`).

If you have `tqdm` installed, you can create a fancy progress bar:

```python
from tqdm import tqdm
from ffmpeg_progress_yield import FfmpegProgress

cmd = [
    "ffmpeg", "-i", "test/test.mp4", "-c:v", "libx264", "-vf", "scale=1920x1080", "-preset", "fast", "-f", "null", "/dev/null",
]

ff = FfmpegProgress(cmd)
with tqdm(total=100, position=1, desc="Test") as pbar:
    for progress in ff.run_command_with_progress():
        pbar.update(progress - pbar.n)

# get the output
print(ff.stderr)
```

You can also quit the command by calling `.quit()`:

```python
ff = FfmpegProgress(cmd)
for progress in ff.run_command_with_progress():
    if progress > 50:
        ff.quit()
        break
```

This will send a hard quit to the ffmpeg process, and may not wait for it to finish. To quit gracefully, use `.quit_gracefully()` instead, which sends 'q' to the ffmpeg process, and waits for it to finish.

This is probably most useful in asynchronous environments, where you can run the command in a separate thread, and quit it from the main thread (e.g. using a [Condition Variable](https://docs.python.org/3/library/threading.html#threading.Condition)).

### On the command line

Simply prefix your ffmpeg command with `ffmpeg-progress-yield`:

```bash
ffmpeg-progress-yield ffmpeg -i input.mp4 output.mp4
```

It will show a progress bar, and once the command is done, show the ffmpeg stderr output.

If you want to manually override the duration to, say, 12.5 seconds (e.g. because your input doesn't have an implicit one):

```bash
ffmpeg-progress-yield --duration 12.5 ffmpeg -f lavfi -i testsrc -t 12.5 output.mp4
```

You can also redirect the output to a log file:

```bash
ffmpeg-progress-yield --exclude-progress --log-file log.txt ffmpeg -i input.mp4 output.mp4
```

This will exclude the progress bar from the output, and redirect it to a log file.

## Caveats

Currently, we do not differentiate between `stderr` and `stdout`. This means progress will be mixed with the ffmpeg log.

You can also check out [`ffmpeg-progress`](https://github.com/Tatsh/ffmpeg-progress) for a similar project with a different feature set.

## Contributors

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="http://slhck.info/"><img src="https://avatars.githubusercontent.com/u/582444?v=4?s=100" width="100px;" alt="Werner Robitza"/><br /><sub><b>Werner Robitza</b></sub></a><br /><a href="https://github.com/slhck/ffmpeg-progress-yield/commits?author=slhck" title="Code">üíª</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/WyattBlue"><img src="https://avatars.githubusercontent.com/u/57511737?v=4?s=100" width="100px;" alt="WyattBlue"/><br /><sub><b>WyattBlue</b></sub></a><br /><a href="https://github.com/slhck/ffmpeg-progress-yield/commits?author=WyattBlue" title="Code">üíª</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/kskadart"><img src="https://avatars.githubusercontent.com/u/120260513?v=4?s=100" width="100px;" alt="Kirill Konovalov"/><br /><sub><b>Kirill Konovalov</b></sub></a><br /><a href="https://github.com/slhck/ffmpeg-progress-yield/commits?author=kskadart" title="Code">üíª</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ammgws"><img src="https://avatars.githubusercontent.com/u/20397027?v=4?s=100" width="100px;" alt="Jason Nader"/><br /><sub><b>Jason Nader</b></sub></a><br /><a href="https://github.com/slhck/ffmpeg-progress-yield/issues?q=author%3Aammgws" title="Bug reports">üêõ</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/LaunchLee"><img src="https://avatars.githubusercontent.com/u/80872691?v=4?s=100" width="100px;" alt="Launch Lee"/><br /><sub><b>Launch Lee</b></sub></a><br /><a href="https://github.com/slhck/ffmpeg-progress-yield/commits?author=LaunchLee" title="Code">üíª</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/scufre"><img src="https://avatars.githubusercontent.com/u/21089866?v=4?s=100" width="100px;" alt="scufre"/><br /><sub><b>scufre</b></sub></a><br /><a href="https://github.com/slhck/ffmpeg-progress-yield/commits?author=scufre" title="Code">üíª</a></td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td align="center" size="13px" colspan="7">
        <img src="https://raw.githubusercontent.com/all-contributors/all-contributors-cli/1b8533af435da9854653492b1327a23a4dbd0a10/assets/logo-small.svg">
          <a href="https://all-contributors.js.org/docs/en/bot/usage">Add your contributions</a>
        </img>
      </td>
    </tr>
  </tfoot>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

## License

The MIT License (MIT)

Copyright (c) 2021-2023 Werner Robitza

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


# Changelog


## v0.12.0 (2025-03-28)

* Docs: add @scufre as a contributor.

* Update readme.

* Add support to send ffmpeg log (not progress) to a different file.

* Disallow blank issues.


## v0.11.3 (2024-12-11)

* Fix: Clear and print progress when tqdm is not available.

  This relates two printing sequence:

  (1) Print one decimal place after printing two decimal places

  0.74/100 -> 0.8/100 (1 less character)

  (2) Print 100/100 after printing decimal progress

  99.74/100 -> 100/100 (2 less characters)

  99.8/100 -> 100/100 (1 less character)

  So clear the line first, and print progress, showing for a moment, and then repeat, finally a newline. :)


## v0.11.2 (2024-12-10)

* Chore: One-liner progress when tqdm is not available.


## v0.11.1 (2024-11-22)

* Make setup name PEP 625 compliant.


## v0.11.0 (2024-11-22)

* Remove python 3.8, add 3.12, 3.13.


## v0.10.0 (2024-11-18)

* Fix: ensure percentage is always in float.


## v0.9.1 (2024-09-16)

* Fix: the logic of the option --progress-only.


## v0.9.0 (2024-09-16)

* Docs: add @LaunchLee as a contributor.

* Chore: Add an option to print progress only in cli usage.

  This option makes the output cleaner when doing batch conversions.

* Code cleanup, refactoring.

  To avoid having to juggle around variables


## v0.8.1 (2024-09-09)

* Fix type-checks.


## v0.8.0 (2024-09-09)

* Add async support.


## v0.7.9 (2024-08-14)

* Docs: add @ammgws as a contributor.

* Fix typing error.

* Chore: remove unused dependency.

* Fix badge link.


## v0.7.8 (2023-06-01)

* Image handling.

  Check if image2 inputs use looping or not, and set duration to infinity if needed


## v0.7.6 (2023-05-30)

* Always use duration_override if present.


## v0.7.5 (2023-05-30)

* Fix duration for multiple inputs, fixes #13.

* Fix 'Test' string in tqdm.


## v0.7.4 (2023-05-06)

* Fix: round percentage numbers.


## v0.7.3 (2023-05-05)

* Update readme.

* Add progress as percent, fixes #12.


## v0.7.2 (2023-03-04)

* Do not print input information when probing, addresses #10.


## v0.7.1 (2023-02-24)

* Fix types in CI.

* Remove unneeded import.

* Typo.

* Docs: add @kskadart as a contributor.

* Fix formatting.

* Fix types.

* Feat(ffprobe): FEAT-0001 try to get duration by ffprobe in case if loglevel=error.

* Fix CI file.


## v0.7.0 (2023-01-24)

* Add duration override to API.

* Remove manifest.in.

* Add mypy settings.


## v0.6.1 (2022-12-18)

* Add py.typed.

* Move API docs to existing section.


## v0.6.0 (2022-12-17)

* Link to API docs.

* Add API docs.

* Add export.

* Bump requirements to python 3.8 or higher.

* Document methods.

* Remove unused import.

* Docs: add @WyattBlue as a contributor.

* Docs: add @slhck as a contributor.

* Unhide to_ms.

* Add type hints + simplify.

* Add python CI badge.

* Fix quit tests.

* Add all-contributors.

* Add pytest to dev requirements.

* Add github workflows.

* Formatting.

* Fix a few type and formatting errors.


## v0.5.0 (2022-12-12)

* Add stderr callback method.

* Update README.

* Add graceful quit method.

* Add a GIF in the readme.


## v0.4.0 (2022-12-11)

* Add a quit method, fixes #4.


## v0.3.0 (2022-08-02)

* Update python requirements.


## v0.2.0 (2021-11-21)

* Add a usage option.


## v0.1.2 (2021-08-14)

* Remove universal_newlines for Windows compat.


## v0.1.1 (2021-07-01)

* Remove stats_period option for backwards compatibility, fixes #2.


## v0.1.0 (2021-06-30)

* Format code with black.

* Yield 0 in progress and improve logic.

* Set universal_newlines to true and add kwargs support.

* Increase stats period.

* Document method.

* Add typing.

* Also check for 0 in output.

* Update gitignore.

* Drop python 3.5 support.

* Update badge link.


## v0.0.4 (2021-03-10)

* Add python_requires to setup.py.


## v0.0.3 (2021-03-06)

* Remove release script.


## v0.0.2 (2021-03-06)

* Fix release script.

* Remove support for older versions.

* Format setup.py.

* Remove requirement for command to start with ffmpeg.

* Add link to similar project.

* Add changelog.

* Rename project.

* Initial commit.


