diff --git a/Makefile b/Makefile
index 493fd2c..e1f0770 100644
--- a/Makefile
+++ b/Makefile
@@ -1403,41 +1403,6 @@ Q3OBJ = \
   $(B)/client/l_script.o \
   $(B)/client/l_struct.o \
   \
-  $(B)/client/jcapimin.o \
-  $(B)/client/jcapistd.o \
-  $(B)/client/jccoefct.o  \
-  $(B)/client/jccolor.o \
-  $(B)/client/jcdctmgr.o \
-  $(B)/client/jchuff.o   \
-  $(B)/client/jcinit.o \
-  $(B)/client/jcmainct.o \
-  $(B)/client/jcmarker.o \
-  $(B)/client/jcmaster.o \
-  $(B)/client/jcomapi.o \
-  $(B)/client/jcparam.o \
-  $(B)/client/jcphuff.o \
-  $(B)/client/jcprepct.o \
-  $(B)/client/jcsample.o \
-  $(B)/client/jdapimin.o \
-  $(B)/client/jdapistd.o \
-  $(B)/client/jdatasrc.o \
-  $(B)/client/jdcoefct.o \
-  $(B)/client/jdcolor.o \
-  $(B)/client/jddctmgr.o \
-  $(B)/client/jdhuff.o \
-  $(B)/client/jdinput.o \
-  $(B)/client/jdmainct.o \
-  $(B)/client/jdmarker.o \
-  $(B)/client/jdmaster.o \
-  $(B)/client/jdpostct.o \
-  $(B)/client/jdsample.o \
-  $(B)/client/jdtrans.o \
-  $(B)/client/jerror.o \
-  $(B)/client/jfdctflt.o \
-  $(B)/client/jidctflt.o \
-  $(B)/client/jmemmgr.o \
-  $(B)/client/jmemnobs.o \
-  $(B)/client/jutils.o \
   \
   $(B)/client/tr_animation.o \
   $(B)/client/tr_backend.o \
diff --git a/code/renderer/tr_image_jpg.c b/code/renderer/tr_image_jpg.c
index 2e1a52a..5087c6e 100644
--- a/code/renderer/tr_image_jpg.c
+++ b/code/renderer/tr_image_jpg.c
@@ -30,8 +30,7 @@ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  * You may also wish to include "jerror.h".
  */
 
-#define JPEG_INTERNALS
-#include "../jpeg-6b/jpeglib.h"
+#include <jpeglib.h>
 
 void R_LoadJPG( const char *filename, unsigned char **pic, int *width, int *height ) {
   /* This struct contains the JPEG decompression parameters and pointers to
@@ -131,7 +130,10 @@ void R_LoadJPG( const char *filename, unsigned char **pic, int *width, int *heig
   }
 
   memcount = pixelcount * 4;
-  row_stride = cinfo.output_width * cinfo.output_components;
+  if (3 == cinfo.output_components)
+    row_stride = cinfo.output_width * 4;
+  else
+    row_stride = cinfo.output_width * cinfo.output_components;
 
   out = ri.Malloc(memcount);
 
@@ -144,14 +146,26 @@ void R_LoadJPG( const char *filename, unsigned char **pic, int *width, int *heig
   /* Here we use the library's state variable cinfo.output_scanline as the
    * loop counter, so that we don't have to keep track ourselves.
    */
+  buf = out;
   while (cinfo.output_scanline < cinfo.output_height) {
     /* jpeg_read_scanlines expects an array of pointers to scanlines.
      * Here the array is only one element long, but you could ask for
      * more than one scanline at a time if that's more convenient.
      */
-	buf = ((out+(row_stride*cinfo.output_scanline)));
 	buffer = &buf;
     (void) jpeg_read_scanlines(&cinfo, buffer, 1);
+    if (3 == cinfo.output_components) {
+      /* turn RGB into RGBA */
+      int ioffset = cinfo.output_width * 3 - 1;
+      int ooffset = cinfo.output_width * 4 - 1;
+      do {
+	buf[ooffset--] = 255;
+	buf[ooffset--] = buf[ioffset--];
+	buf[ooffset--] = buf[ioffset--];
+	buf[ooffset--] = buf[ioffset--];
+      } while (ioffset > 0);
+    }
+    buf += row_stride;
   }
   
   buf = out;
@@ -176,7 +190,7 @@ void R_LoadJPG( const char *filename, unsigned char **pic, int *width, int *heig
 		buf[--dindex] = greyshade;
 	} while(sindex);
   }
-  else
+  else if (4 == cinfo.output_components) 
   {
 	// clear all the alphas to 255
 	int	i;
