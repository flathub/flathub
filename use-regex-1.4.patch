From 0509d49c4bd5931a78b4f3df5771cdd2d369e238 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Claudio=20Andr=C3=A9?= <claudioandre.br@gmail.com>
Date: Sat, 12 Aug 2017 23:27:45 -0300
Subject: [PATCH] maint: revert JtR to regex 1.4

See https://github.com/magnumripper/JohnTheRipper/issues/2640
---
 src/configure |  2 +-
 src/regex.c   | 44 ++++++++++++++++++++------------------------
 src/regex.h   |  4 ++--
 3 files changed, 23 insertions(+), 27 deletions(-)

diff --git a/src/configure b/src/configure
index cca210e6b..16a487da9 100755
--- a/src/configure
+++ b/src/configure
@@ -10341,7 +10341,7 @@ See \`config.log' for more details" "$LINENO" 5; }
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
-int main() { return ! (rexgen_version_int() >= 0x020006); }
+int main() { return ! (rexgen_version_int() >= 0x010400); }
 _ACEOF
 if ac_fn_c_try_run "$LINENO"; then :
   { $as_echo "$as_me:${as_lineno-$LINENO}: result: usable" >&5
diff --git a/src/regex.c b/src/regex.c
index a0cff213b..b0a65820f 100644
--- a/src/regex.c
+++ b/src/regex.c
@@ -137,13 +137,13 @@ static void rexgen_setlocale()
 }
 
 // Would be nice to have SOME way to be thread safe!!!
-static char BaseWord[LINE_BUFFER_SIZE];
+static wchar_t BaseWord[LINE_BUFFER_SIZE];
 
-size_t callback(char* dst, const size_t buffer_size)
+size_t callback(wchar_t* dst, const size_t buffer_size)
 {
-	size_t len = strlen(BaseWord);
+	size_t len = wcslen(BaseWord);
 
-	memcpy(dst, BaseWord, (len + 1) * sizeof(BaseWord[0]));
+	memcpy(dst, BaseWord, (len + 1) * SIZEOF_WCHAR_T);
 	*BaseWord = 0;
 	return len;
 }
@@ -190,7 +190,7 @@ int do_regex_hybrid_crack(struct db_main *db, const char *regex,
                           const char *regex_alpha)
 {
 	c_simplestring_ptr buffer = c_simplestring_new();
-	const char* word;
+	char word[PLAINTEXT_BUFFER_SIZE];
 	static int bFirst = 1;
 	static int bALPHA = 0;
 	int max_len = db->format->params.plaintext_length;
@@ -203,11 +203,10 @@ int do_regex_hybrid_crack(struct db_main *db, const char *regex,
 	if (bFirst)
 		rexgen_setlocale();
 
-	//if (options.internal_cp != UTF_8)
-	//	cp_to_wcs(BaseWord, sizeof(BaseWord), base_word);
-	//else /* options.internal_cp == UTF_8 */
-	//	enc_to_wcs(BaseWord, sizeof(BaseWord), base_word);
-	strcpy(BaseWord, base_word);
+	if (options.internal_cp != UTF_8)
+		cp_to_wcs(BaseWord, sizeof(BaseWord), base_word);
+	else
+		enc_to_wcs(BaseWord, sizeof(BaseWord), base_word);
 
 	if (bFirst) {
 		bFirst = 0;
@@ -219,7 +218,7 @@ int do_regex_hybrid_crack(struct db_main *db, const char *regex,
 		rec_init_hybrid(save_state_hybrid);
 		crk_set_hybrid_fix_state_func_ptr(rex_hybrid_fix_state);
 
-		regex_ptr = c_regex_cb_mb(regex, callback);
+		regex_ptr = c_regex_cb(regex, callback);
 		if (!regex_ptr) {
 			c_simplestring_delete(buffer);
 			fprintf(stderr,
@@ -287,14 +286,11 @@ int do_regex_hybrid_crack(struct db_main *db, const char *regex,
 	}
 
 	while (c_iterator_next(iter)) {
-		c_simplestring_clear(buffer);
 		c_iterator_value(iter, buffer);
-		word = c_simplestring_to_string(buffer);
-		/**
-		  * rexgen already creates the correct encoding
-		  */
-		//if (options.internal_cp != UTF_8)
-		//	utf8_to_cp_r(word, word, sizeof(word));
+		c_simplestring_to_utf8_string(buffer, &word[0], sizeof(word));
+		c_simplestring_clear(buffer);
+		if (options.internal_cp != UTF_8)
+			utf8_to_cp_r(word, word, sizeof(word));
 		if (options.flags & FLG_MASK_CHK) {
 			if (do_mask_crack(word)) {
 				retval = 1;
@@ -302,7 +298,7 @@ int do_regex_hybrid_crack(struct db_main *db, const char *regex,
 			}
 		} else
 		if (ext_filter((char *)word)) {
-			c_simplestring_truncate_bytes(buffer, max_len);
+			word[max_len] = 0;
 			if (crk_process_key((char *)word)) {
 				retval = 1;
 				goto out;
@@ -320,7 +316,7 @@ out:
 void do_regex_crack(struct db_main *db, const char *regex)
 {
 	c_simplestring_ptr buffer = c_simplestring_new();
-	const char* word;
+	char word[PLAINTEXT_BUFFER_SIZE];
 	int max_len = db->format->params.plaintext_length;
 
 	if (options.req_maxlength)
@@ -334,7 +330,7 @@ void do_regex_crack(struct db_main *db, const char *regex)
 	crk_init(db, fix_state, NULL);
 	rec_init_hybrid(save_state_hybrid);
 
-	regex_ptr = c_regex_cb_mb(regex, callback);
+	regex_ptr = c_regex_cb(regex, callback);
 	if (!regex_ptr) {
 		fprintf(stderr,
 		        "Error, invalid regex expression.  John exiting now\n");
@@ -350,15 +346,15 @@ void do_regex_crack(struct db_main *db, const char *regex)
 		restore_str = 0;
 	}
 	while (c_iterator_next(iter)) {
-		c_simplestring_clear(buffer);
 		c_iterator_value(iter, buffer);
-		word = c_simplestring_to_string(buffer);
+		c_simplestring_to_utf8_string(buffer, &word[0], sizeof(word));
+		c_simplestring_clear(buffer);
 		if (options.flags & FLG_MASK_CHK) {
 			if (do_mask_crack(word))
 				break;
 		} else
 		if (ext_filter((char *)word)) {
-			c_simplestring_truncate_bytes(buffer, max_len);
+			word[max_len] = 0;
 			if (crk_process_key((char *)word))
 				break;
 		}
diff --git a/src/regex.h b/src/regex.h
index 662d0a315..e05ec1e3f 100644
--- a/src/regex.h
+++ b/src/regex.h
@@ -41,8 +41,8 @@
 extern int vc_fixed_snprintf(char *Dest, size_t max_cnt, const char *Fmt, ...);
 #endif
 
-/* require at least version 2.0.6 of rexgen */
-#if (JS_REGEX_MAJOR_VERSION > 2) || ((JS_REGEX_MAJOR_VERSION == 2) && ((JS_REGEX_MINOR_VERSION > 0) || (JS_REGEX_BUILD_VERSION >= 6)))
+
+#if (JS_REGEX_MAJOR_VERSION>1) || ((JS_REGEX_MAJOR_VERSION==1)&&(JS_REGEX_MINOR_VERSION>=3))
 
 #include "loader.h"
 /*
-- 
2.11.0

