diff -Naur old/siplib/siplib.c.in new/siplib/siplib.c.in
--- old/siplib/siplib.c.in	2018-07-02 02:36:20.615581861 +0200
+++ new/siplib/siplib.c.in	2018-07-02 02:54:20.281192530 +0200
@@ -6275,14 +6275,22 @@
         PyObject *type_dict, sipExportedModuleDef *client)
 {
     PyObject *py_type, *scope_dict, *name, *args;
+    sipTypeDef *scope_td;
 
     /* Get the dictionary to place the type in. */
     if (cod->cod_scope.sc_flag)
     {
+        scope_td = NULL;
         scope_dict = mod_dict;
     }
-    else if ((scope_dict = getScopeDict(getGeneratedType(&cod->cod_scope, client), mod_dict, client)) == NULL)
-        goto reterr;
+    else
+    {
+        scope_td = getGeneratedType(&cod->cod_scope, client);
+        scope_dict = getScopeDict(scope_td, mod_dict, client);
+
+        if (scope_dict == NULL)
+            goto reterr;
+    }
 
     /* Create an object corresponding to the type name. */
 #if PY_MAJOR_VERSION >= 3
@@ -6313,6 +6321,23 @@
     if (py_type == NULL)
         goto relargs;
 
+#if PY_VERSION_HEX >= 0x03030000
+    /* Fix __qualname__ if there is a scope. */
+    if (scope_td != NULL)
+    {
+        PyHeapTypeObject *ht;
+        PyObject *qualname = get_qualname(scope_td, name);
+
+        if (qualname == NULL)
+            goto reltype;
+
+        ht = (PyHeapTypeObject *)py_type;
+
+        Py_CLEAR(ht->ht_qualname);
+        ht->ht_qualname = qualname;
+    }
+#endif
+
     /* Add the type to the "parent" dictionary. */
     if (PyDict_SetItem(scope_dict, name, py_type) < 0)
         goto reltype;
